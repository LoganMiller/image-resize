import test from '@interactjs/_dev/test/test';
import * as helpers from '@interactjs/core/tests/_helpers';
import * as utils from '@interactjs/utils';
import modifiersBase from './base';
test('modifiers/base', (t) => {
    const scope = helpers.mockScope();
    modifiersBase.install(scope);
    scope.actions.eventTypes.push('TESTstart', 'TESTmove', 'TESTend');
    // eslint-disable-next-line new-cap
    const interaction = scope.interactions.new({});
    t.ok(utils.is.object(interaction.modifiers), 'modifiers prop is added new Interaction');
    const element = utils.win.window.document.documentElement;
    const interactable = scope.interactables.new(element);
    const startEvent = {
        pageX: 100,
        pageY: 200,
        clientX: 100,
        clientY: 200,
        target: element,
    };
    const moveEvent = {
        pageX: 400,
        pageY: 500,
        clientX: 400,
        clientY: 500,
        target: element,
    };
    const options = { target: { x: 100, y: 100 }, setStart: true };
    let firedEvents = [];
    interactable.rectChecker(() => ({ top: 0, left: 0, bottom: 50, right: 50 }));
    interactable.on('TESTstart TESTmove TESTend', (event) => firedEvents.push(event));
    interaction.pointerDown(startEvent, startEvent, element);
    interactable.options.TEST = {
        enabled: true,
        modifiers: [
            {
                options,
                methods: targetModifier,
            },
        ],
    };
    interaction.start({ name: 'TEST' }, interactable, element);
    t.ok(options.started, 'modifier methods.start() was called');
    t.ok(options.setted, 'modifier methods.set() was called');
    t.deepEqual(interaction.prevEvent.page, options.target, 'start event coords are modified');
    t.deepEqual(interaction.coords.start.page, { x: 100, y: 200 }, 'interaction.coords.start are restored after action start phase');
    t.deepEqual(interaction.coords.cur.page, { x: 100, y: 200 }, 'interaction.coords.cur are restored after action start phase');
    interaction.pointerMove(moveEvent, moveEvent, element);
    t.deepEqual(interaction.coords.cur.page, { x: moveEvent.pageX, y: moveEvent.pageY }, 'interaction.coords.cur are restored after action move phase');
    t.deepEqual(interaction.coords.start.page, { x: startEvent.pageX, y: startEvent.pageY }, 'interaction.coords.start are restored after action move phase');
    t.deepEqual({ x: interaction.prevEvent.x0, y: interaction.prevEvent.y0 }, { x: 100, y: 100 }, 'move event start coords are modified');
    firedEvents = [];
    const similarMoveEvent = { ...moveEvent, pageX: moveEvent.pageX + 0.5 };
    interaction.pointerMove(similarMoveEvent, similarMoveEvent, element);
    t.equal(firedEvents.length, 0, 'duplicate result coords are ignored');
    interaction.stop();
    t.ok(options.stopped, 'modifier methods.stop() was called');
    // don't set start
    options.setStart = null;
    // add second modifier
    interactable.options.TEST.modifiers.push({
        options,
        methods: doubleModifier,
    });
    interaction.pointerDown(startEvent, startEvent, element);
    interaction.start({ name: 'TEST' }, interactable, element);
    t.notOk(options.setted, 'modifier methods.set() was not called on start phase without options.setStart');
    t.deepEqual(interaction.prevEvent.page, { x: 100, y: 200 }, 'start event coords are not modified without options.setStart');
    t.deepEqual(interaction.coords.start.page, { x: 100, y: 200 }, 'interaction.coords.start are not modified without options.setStart');
    interaction.pointerMove(moveEvent, moveEvent, element);
    t.deepEqual(interaction.prevEvent.page, { x: 200, y: 200 }, 'move event coords are modified by all modifiers');
    // modifier options.type
    scope.modifiers.target = modifiersBase.makeModifier(targetModifier);
    options.type = 'target';
    options.started = false;
    interactable.options.TEST = {
        enabled: true,
        modifiers: [
            options,
        ],
    };
    interaction.stop();
    interaction.start({ name: 'TEST' }, interactable, element);
    t.ok(options.started, 'gets `scpe.modifiers[options.type]`');
    t.end();
});
const targetModifier = {
    start({ state }) {
        state.options.started = true;
    },
    set({ state, coords }) {
        const { target } = state.options;
        coords.x = target.x;
        coords.y = target.y;
        state.options.setted = true;
    },
    stop({ state }) {
        state.options.stopped = true;
        delete state.options.started;
        delete state.options.setted;
    },
};
const doubleModifier = {
    start() { },
    set({ coords }) {
        coords.x *= 2;
        coords.y *= 2;
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYmFzZS5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sSUFBSSxNQUFNLDRCQUE0QixDQUFBO0FBQzdDLE9BQU8sS0FBSyxPQUFPLE1BQU0saUNBQWlDLENBQUE7QUFDMUQsT0FBTyxLQUFLLEtBQUssTUFBTSxtQkFBbUIsQ0FBQTtBQUMxQyxPQUFPLGFBQWEsTUFBTSxRQUFRLENBQUE7QUFFbEMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUU7SUFDM0IsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLFNBQVMsRUFBRSxDQUFBO0lBRWpDLGFBQWEsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDNUIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxVQUFVLEVBQUUsU0FBUyxDQUFDLENBQUE7SUFFakUsbUNBQW1DO0lBQ25DLE1BQU0sV0FBVyxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBRTlDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxFQUFFLHlDQUF5QyxDQUFDLENBQUE7SUFFdkYsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQTtJQUN6RCxNQUFNLFlBQVksR0FBRyxLQUFLLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUNyRCxNQUFNLFVBQVUsR0FBRztRQUNqQixLQUFLLEVBQUUsR0FBRztRQUNWLEtBQUssRUFBRSxHQUFHO1FBQ1YsT0FBTyxFQUFFLEdBQUc7UUFDWixPQUFPLEVBQUUsR0FBRztRQUNaLE1BQU0sRUFBRSxPQUFPO0tBQ2hCLENB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QUUsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFO1FBQ3BCLE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFBO1FBRWhDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQTtRQUNuQixNQUFNLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUE7UUFFbkIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFBO0lBQzdCLENBQUM7SUFDRCxJQUFJLENBQUUsRUFBRSxLQUFLLEVBQUU7UUFDYixLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUE7UUFDNUIsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQTtRQUM1QixPQUFPLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFBO0lBQzdCLENBQUM7Q0FDRixDQUFBO0FBRUQsTUFBTSxjQUFjLEdBQUc7SUFDckIsS0FBSyxLQUFLLENBQUM7SUFDWCxHQUFHLENBQUUsRUFBRSxNQUFNLEVBQUU7UUFDYixNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUNiLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQ2YsQ0FBQztDQUNGLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdGVzdCBmcm9tICdAaW50ZXJhY3Rqcy9fZGV2L3Rlc3QvdGVzdCdcbmltcG9ydCAqIGFzIGhlbHBlcnMgZnJvbSAnQGludGVyYWN0anMvY29yZS90ZXN0cy9faGVscGVycydcbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJ0BpbnRlcmFjdGpzL3V0aWxzJ1xuaW1wb3J0IG1vZGlmaWVyc0Jhc2UgZnJvbSAnLi9iYXNlJ1xuXG50ZXN0KCdtb2RpZmllcnMvYmFzZScsICh0KSA9PiB7XG4gIGNvbnN0IHNjb3BlID0gaGVscGVycy5tb2NrU2NvcGUoKVxuXG4gIG1vZGlmaWVyc0Jhc2UuaW5zdGFsbChzY29wZSlcbiAgc2NvcGUuYWN0aW9ucy5ldmVudFR5cGVzLnB1c2goJ1RFU1RzdGFydCcsICdURVNUbW92ZScsICdURVNUZW5kJylcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbmV3LWNhcFxuICBjb25zdCBpbnRlcmFjdGlvbiA9IHNjb3BlLmludGVyYWN0aW9ucy5uZXcoe30pXG5cbiAgdC5vayh1dGlscy5pcy5vYmplY3QoaW50ZXJhY3Rpb24ubW9kaWZpZXJzKSwgJ21vZGlmaWVycyBwcm9wIGlzIGFkZGVkIG5ldyBJbnRlcmFjdGlvbicpXG5cbiAgY29uc3QgZWxlbWVudCA9IHV0aWxzLndpbi53aW5kb3cuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XG4gIGNvbnN0IGludGVyYWN0YWJsZSA9IHNjb3BlLmludGVyYWN0YWJsZXMubmV3KGVsZW1lbnQpXG4gIGNvbnN0IHN0YXJ0RXZlbnQgPSB7XG4gICAgcGFnZVg6IDEwMCxcbiAgICBwYWdlWTogMjAwLFxuICAgIGNsaWVudFg6IDEwMCxcbiAgICBjbGllbnRZOiAyMDAsXG4gICAgdGFyZ2V0OiBlbGVtZW50LFxuICB9XG4gIGNvbnN0IG1vdmVFdmVudCA9IHtcbiAgICBwYWdlWDogNDAwLFxuICAgIHBhZ2VZOiA1MDAsXG4gICAgY2xpZW50WDogNDAwLFxuICAgIGNsaWVudFk6IDUwMCxcbiAgICB0YXJnZXQ6IGVsZW1lbnQsXG4gIH1cbiAgY29uc3Qgb3B0aW9uczogYW55ID0geyB0YXJnZXQ6IHsgeDogMTAwLCB5OiAxMDAgfSwgc2V0U3RhcnQ6IHRydWUgfVxuICBsZXQgZmlyZWRFdmVudHMgPSBbXVxuXG4gIGludGVyYWN0YWJsZS5yZWN0Q2hlY2tlcigoKSA9PiAoeyB0b3A6IDAsIGxlZnQ6IDAsIGJvdHRvbTogNTAsIHJpZ2h0OiA1MCB9KSlcbiAgaW50ZXJhY3RhYmxlLm9uKCdURVNUc3RhcnQgVEVTVG1vdmUgVEVTVGVuZCcsIChldmVudCkgPT4gZmlyZWRFdmVudHMucHVzaChldmVudCkpXG4gIGludGVyYWN0aW9uLnBvaW50ZXJEb3duKHN0YXJ0RXZlbnQsIHN0YXJ0RXZlbnQsIGVsZW1lbnQpXG5cbiAgaW50ZXJhY3RhYmxlLm9wdGlvbnMuVEVTVCA9IHtcbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIG1vZGlmaWVyczogW1xuICAgICAge1xuICAgICAgICBvcHRpb25zLFxuICAgICAgICBtZXRob2RzOiB0YXJnZXRNb2RpZmllcixcbiAgICAgIH0sXG4gICAgXSxcbiAgfVxuXG4gIGludGVyYWN0aW9uLnN0YXJ0KHsgbmFtZTogJ1RFU1QnIH0sIGludGVyYWN0YWJsZSwgZWxlbWVudClcblxuICB0Lm9rKFxuICAgIG9wdGlvbnMuc3RhcnRlZCxcbiAgICAnbW9kaWZpZXIgbWV0aG9kcy5zdGFydCgpIHdhcyBjYWxsZWQnLFxuICApXG5cbiAgdC5vayhcbiAgICBvcHRpb25zLnNldHRlZCxcbiAgICAnbW9kaWZpZXIgbWV0aG9kcy5zZXQoKSB3YXMgY2FsbGVkJyxcbiAgKVxuXG4gIHQuZGVlcEVxdWFsKFxuICAgIGludGVyYWN0aW9uLnByZXZFdmVudC5wYWdlLFxuICAgIG9wdGlvbnMudGFyZ2V0LFxuICAgICdzdGFydCBldmVudCBjb29yZHMgYXJlIG1vZGlmaWVkJylcblxuICB0LmRlZXBFcXVhbChcbiAgICBpbnRlcmFjdGlvbi5jb29yZHMuc3RhcnQucGFnZSxcbiAgICB7IHg6IDEwMCwgeTogMjAwIH0sXG4gICAgJ2ludGVyYWN0aW9uLmNvb3Jkcy5zdGFydCBhcmUgcmVzdG9yZWQgYWZ0ZXIgYWN0aW9uIHN0YXJ0IHBoYXNlJylcblxuICB0LmRlZXBFcXVhbChcbiAgICBpbnRlcmFjdGlvbi5jb29yZHMuY3VyLnBhZ2UsXG4gICAgeyB4OiAxMDAsIHk6IDIwMCB9LFxuICAgICdpbnRlcmFjdGlvbi5jb29yZHMuY3VyIGFyZSByZXN0b3JlZCBhZnRlciBhY3Rpb24gc3RhcnQgcGhhc2UnKVxuXG4gIGludGVyYWN0aW9uLnBvaW50ZXJNb3ZlKG1vdmVFdmVudCwgbW92ZUV2ZW50LCBlbGVtZW50KVxuXG4gIHQuZGVlcEVxdWFsKFxuICAgIGludGVyYWN0aW9uLmNvb3Jkcy5jdXIucGFnZSxcbiAgICB7IHg6IG1vdmVFdmVudC5wYWdlWCwgeTogbW92ZUV2ZW50LnBhZ2VZIH0sXG4gICAgJ2ludGVyYWN0aW9uLmNvb3Jkcy5jdXIgYXJlIHJlc3RvcmVkIGFmdGVyIGFjdGlvbiBtb3ZlIHBoYXNlJylcblxuICB0LmRlZXBFcXVhbChcbiAgICBpbnRlcmFjdGlvbi5jb29yZHMuc3RhcnQucGFnZSxcbiAgICB7IHg6IHN0YXJ0RXZlbnQucGFnZVgsIHk6IHN0YXJ0RXZlbnQucGFnZVkgfSxcbiAgICAnaW50ZXJhY3Rpb24uY29vcmRzLnN0YXJ0IGFyZSByZXN0b3JlZCBhZnRlciBhY3Rpb24gbW92ZSBwaGFzZScpXG5cbiAgdC5kZWVwRXF1YWwoXG4gICAgeyB4OiBpbnRlcmFjdGlvbi5wcmV2RXZlbnQueDAsIHk6IGludGVyYWN0aW9uLnByZXZFdmVudC55MCB9LFxuICAgIHsgeDogMTAwLCB5OiAxMDAgfSxcbiAgICAnbW92ZSBldmVudCBzdGFydCBjb29yZHMgYXJlIG1vZGlmaWVkJylcblxuICBmaXJlZEV2ZW50cyA9IFtdXG4gIGNvbnN0IHNpbWlsYXJNb3ZlRXZlbnQgPSB7IC4uLm1vdmVFdmVudCwgcGFnZVg6IG1vdmVFdmVudC5wYWdlWCArIDAuNSB9XG4gIGludGVyYWN0aW9uLnBvaW50ZXJNb3ZlKHNpbWlsYXJNb3ZlRXZlbnQsIHNpbWlsYXJNb3ZlRXZlbnQsIGVsZW1lbnQpXG4gIHQuZXF1YWwoZmlyZWRFdmVudHMubGVuZ3RoLCAwLCAnZHVwbGljYXRlIHJlc3VsdCBjb29yZHMgYXJlIGlnbm9yZWQnKVxuXG4gIGludGVyYWN0aW9uLnN0b3AoKVxuXG4gIHQub2soXG4gICAgb3B0aW9ucy5zdG9wcGVkLFxuICAgICdtb2RpZmllciBtZXRob2RzLnN0b3AoKSB3YXMgY2FsbGVkJyxcbiAgKVxuXG4gIC8vIGRvbid0IHNldCBzdGFydFxuICBvcHRpb25zLnNldFN0YXJ0ID0gbnVsbFxuICAvLyBhZGQgc2Vjb25kIG1vZGlmaWVyXG4gIGludGVyYWN0YWJsZS5vcHRpb25zLlRFU1QubW9kaWZpZXJzLnB1c2goe1xuICAgIG9wdGlvbnMsXG4gICAgbWV0aG9kczogZG91YmxlTW9kaWZpZXIsXG4gIH0pXG5cbiAgaW50ZXJhY3Rpb24ucG9pbnRlckRvd24oc3RhcnRFdmVudCwgc3RhcnRFdmVudCwgZWxlbWVudClcbiAgaW50ZXJhY3Rpb24uc3RhcnQoeyBuYW1lOiAnVEVTVCcgfSwgaW50ZXJhY3RhYmxlLCBlbGVtZW50KVxuXG4gIHQubm90T2soXG4gICAgb3B0aW9ucy5zZXR0ZWQsXG4gICAgJ21vZGlmaWVyIG1ldGhvZHMuc2V0KCkgd2FzIG5vdCBjYWxsZWQgb24gc3RhcnQgcGhhc2Ugd2l0aG91dCBvcHRpb25zLnNldFN0YXJ0JyxcbiAgKVxuXG4gIHQuZGVlcEVxdWFsKFxuICAgIGludGVyYWN0aW9uLnByZXZFdmVudC5wYWdlLFxuICAgIHsgeDogMTAwLCB5OiAyMDAgfSxcbiAgICAnc3RhcnQgZXZlbnQgY29vcmRzIGFyZSBub3QgbW9kaWZpZWQgd2l0aG91dCBvcHRpb25zLnNldFN0YXJ0JylcblxuICB0LmRlZXBFcXVhbChcbiAgICBpbnRlcmFjdGlvbi5jb29yZHMuc3RhcnQucGFnZSxcbiAgICB7IHg6IDEwMCwgeTogMjAwIH0sXG4gICAgJ2ludGVyYWN0aW9uLmNvb3Jkcy5zdGFydCBhcmUgbm90IG1vZGlmaWVkIHdpdGhvdXQgb3B0aW9ucy5zZXRTdGFydCcpXG5cbiAgaW50ZXJhY3Rpb24ucG9pbnRlck1vdmUobW92ZUV2ZW50LCBtb3ZlRXZlbnQsIGVsZW1lbnQpXG5cbiAgdC5kZWVwRXF1YWwoXG4gICAgaW50ZXJhY3Rpb24ucHJldkV2ZW50LnBhZ2UsXG4gICAgeyB4OiAyMDAsIHk6IDIwMCB9LFxuICAgICdtb3ZlIGV2ZW50IGNvb3JkcyBhcmUgbW9kaWZpZWQgYnkgYWxsIG1vZGlmaWVycycpXG5cbiAgLy8gbW9kaWZpZXIgb3B0aW9ucy50eXBlXG4gIHNjb3BlLm1vZGlmaWVycy50YXJnZXQgPSBtb2RpZmllcnNCYXNlLm1ha2VNb2RpZmllcih0YXJnZXRNb2RpZmllcilcbiAgb3B0aW9ucy50eXBlID0gJ3RhcmdldCdcbiAgb3B0aW9ucy5zdGFydGVkID0gZmFsc2VcbiAgaW50ZXJhY3RhYmxlLm9wdGlvbnMuVEVTVCA9IHtcbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIG1vZGlmaWVyczogW1xuICAgICAgb3B0aW9ucyxcbiAgICBdLFxuICB9XG4gIGludGVyYWN0aW9uLnN0b3AoKVxuICBpbnRlcmFjdGlvbi5zdGFydCh7IG5hbWU6ICdURVNUJyB9LCBpbnRlcmFjdGFibGUsIGVsZW1lbnQpXG5cbiAgdC5vayhvcHRpb25zLnN0YXJ0ZWQsICdnZXRzIGBzY3BlLm1vZGlmaWVyc1tvcHRpb25zLnR5cGVdYCcpXG5cbiAgdC5lbmQoKVxufSlcblxuY29uc3QgdGFyZ2V0TW9kaWZpZXIgPSB7XG4gIHN0YXJ0ICh7IHN0YXRlIH0pIHtcbiAgICBzdGF0ZS5vcHRpb25zLnN0YXJ0ZWQgPSB0cnVlXG4gIH0sXG4gIHNldCAoeyBzdGF0ZSwgY29vcmRzIH0pIHtcbiAgICBjb25zdCB7IHRhcmdldCB9ID0gc3RhdGUub3B0aW9uc1xuXG4gICAgY29vcmRzLnggPSB0YXJnZXQueFxuICAgIGNvb3Jkcy55ID0gdGFyZ2V0LnlcblxuICAgIHN0YXRlLm9wdGlvbnMuc2V0dGVkID0gdHJ1ZVxuICB9LFxuICBzdG9wICh7IHN0YXRlIH0pIHtcbiAgICBzdGF0ZS5vcHRpb25zLnN0b3BwZWQgPSB0cnVlXG4gICAgZGVsZXRlIHN0YXRlLm9wdGlvbnMuc3RhcnRlZFxuICAgIGRlbGV0ZSBzdGF0ZS5vcHRpb25zLnNldHRlZFxuICB9LFxufVxuXG5jb25zdCBkb3VibGVNb2RpZmllciA9IHtcbiAgc3RhcnQgKCkge30sXG4gIHNldCAoeyBjb29yZHMgfSkge1xuICAgIGNvb3Jkcy54ICo9IDJcbiAgICBjb29yZHMueSAqPSAyXG4gIH0sXG59XG4iXX0=