import test from '@interactjs/_dev/test/test';
import { mockInteractable, mockSignals } from '@interactjs/core/tests/_helpers';
import Interaction from '@interactjs/core/Interaction';
import snap from '../snap/pointer';
test('modifiers/snap', (t) => {
    const interaction = new Interaction({ signals: mockSignals() });
    interaction.interactable = mockInteractable();
    interaction.prepared = {};
    interaction._interacting = true;
    let funcArgs = null;
    const target0 = Object.freeze({ x: 50, y: 100 });
    // eslint-disable-next-line no-restricted-syntax, no-shadow
    const targetFunc = (x, y, interaction, offset, index, ...unexpected) => {
        funcArgs = { x, y, interaction, offset, index, unexpected };
        return target0;
    };
    const relativePoint = { x: 0, y: 0 };
    const options = {
        targets: [
            target0,
            targetFunc,
        ],
        range: Infinity,
        relativePoints: [relativePoint],
        origin: { x: 0, y: 0 },
    };
    const state = {
        options,
        delta: { x: 0, y: 0 },
    };
    const pageCoords = Object.freeze({ x: 10, y: 20 });
    const arg = {
        interaction,
        state,
        pageCoords,
        coords: { ...pageCoords },
        rect: { top: 0, left: 0, bottom: 100, right: 100, width: 100, height: 100 },
        startOffset: { top: 0, left: 0, bottom: 0, right: 0 },
    };
    snap.start(arg);
    snap.set(arg);
    t.deepEqual(arg.coords, target0, 'snap.set single target, zereo offset');
    t.deepEqual(funcArgs, {
        x: pageCoords.x,
        y: pageCoords.y,
        interaction,
        offset: {
            x: relativePoint.x,
            y: relativePoint.y,
            relativePoint,
            index: 0,
        },
        index: 1,
        unexpected: [],
    }, ' x, y, interaction, offset, index are passed to target function');
    t.end();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9pbnRlci5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicG9pbnRlci5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sSUFBSSxNQUFNLDRCQUE0QixDQUFBO0FBQzdDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxXQUFXLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQTtBQUUvRSxPQUFPLFdBQVcsTUFBTSw4QkFBOEIsQ0FBQTtBQUN0RCxPQUFPLElBQUksTUFBTSxpQkFBaUIsQ0FBQTtBQUVsQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRTtJQUMzQixNQUFNLFdBQVcsR0FBRyxJQUFJLFdBQVcsQ0FBQyxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsRUFBUyxDQUFDLENBQUE7SUFDdEUsV0FBVyxDQUFDLFlBQVksR0FBRyxnQkFBZ0IsRUFBRSxDQUFBO0lBQzdDLFdBQVcsQ0FBQyxRQUFRLEdBQUcsRUFBUyxDQUFBO0lBQ2hDLFdBQVcsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFBO0lBRS9CLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQTtJQUNuQixNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQTtJQUNsRCwyREFBMkQ7SUFDM0QsTUFBTSxVQUFVLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsVUFBVSxFQUFFLEVBQUU7UUFDckUsUUFBUSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsQ0FBQTtRQUMzRCxPQUFPLE9BQU8sQ0FBQTtJQUNoQixDQUFDLENBQUE7SUFDRCxNQUFNLGFBQWEsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFBO0lBQ3BDLE1BQU0sT0FBTyxHQUFHO1FBQ2QsT0FBTyxFQUFFO1lBQ1AsT0FBTztZQUNQLFVBQVU7U0FDWDtRQUNELEtBQUssRUFBRSxRQUFRO1FBQ2YsY0FBYyxFQUFFLENBQUMsYUFBYSxDQUFDO1FBQy9CLE1BQU0sRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRTtLQUN2QixDQUFBO0lBRUQsTUFBTSxLQUFLLEdBQUc7UUFDWixPQUFPO1FBQ1AsS0FBSyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0tBQ3RCLENBQUE7SUFDRCxNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQTtJQUNsRCxNQUFNLEdBQUcsR0FBRztRQUNWLFdBQVc7UUFDWCxLQUFLO1FBQ0wsVUFBVTtRQUNWLE1BQU0sRUFBRSxFQUFFLEdBQUcsVUFBVSxFQUFFO1FBQ3pCLElBQUksRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFO1FBQzNFLFdBQVcsRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUU7S0FDL0MsQ0FBQTtJQUVSLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUE7SUFDZixJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBRWIsQ0FBQyxDQUFDLFNBQVMsQ0FDVCxHQUFHLENBQUMsTUFBTSxFQUNWLE9BQU8sRUFDUCxzQ0FBc0MsQ0FDdkMsQ0FBQTtJQUVELENBQUMsQ0FBQyxTQUFTLENBQ1QsUUFBUSxFQUNSO1FBQ0UsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQ2YsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQ2YsV0FBVztRQUNYLE1BQU0sRUFBRTtZQUNOLENBQUMsRUFBRSxhQUFhLENBQUMsQ0FBQztZQUNsQixDQUFDLEVBQUUsYUFBYSxDQUFDLENBQUM7WUFDbEIsYUFBYTtZQUNiLEtBQUssRUFBRSxDQUFDO1NBQ1Q7UUFDRCxLQUFLLEVBQUUsQ0FBQztRQUNSLFVBQVUsRUFBRSxFQUFFO0tBQ2YsRUFDRCxpRUFBaUUsQ0FDbEUsQ0FBQTtJQUVELENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQTtBQUNULENBQUMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHRlc3QgZnJvbSAnQGludGVyYWN0anMvX2Rldi90ZXN0L3Rlc3QnXG5pbXBvcnQgeyBtb2NrSW50ZXJhY3RhYmxlLCBtb2NrU2lnbmFscyB9IGZyb20gJ0BpbnRlcmFjdGpzL2NvcmUvdGVzdHMvX2hlbHBlcnMnXG5cbmltcG9ydCBJbnRlcmFjdGlvbiBmcm9tICdAaW50ZXJhY3Rqcy9jb3JlL0ludGVyYWN0aW9uJ1xuaW1wb3J0IHNuYXAgZnJvbSAnLi4vc25hcC9wb2ludGVyJ1xuXG50ZXN0KCdtb2RpZmllcnMvc25hcCcsICh0KSA9PiB7XG4gIGNvbnN0IGludGVyYWN0aW9uID0gbmV3IEludGVyYWN0aW9uKHsgc2lnbmFsczogbW9ja1NpZ25hbHMoKSB9IGFzIGFueSlcbiAgaW50ZXJhY3Rpb24uaW50ZXJhY3RhYmxlID0gbW9ja0ludGVyYWN0YWJsZSgpXG4gIGludGVyYWN0aW9uLnByZXBhcmVkID0ge30gYXMgYW55XG4gIGludGVyYWN0aW9uLl9pbnRlcmFjdGluZyA9IHRydWVcblxuICBsZXQgZnVuY0FyZ3MgPSBudWxsXG4gIGNvbnN0IHRhcmdldDAgPSBPYmplY3QuZnJlZXplKHsgeDogIDUwLCB5OiAgMTAwIH0pXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheCwgbm8tc2hhZG93XG4gIGNvbnN0IHRhcmdldEZ1bmMgPSAoeCwgeSwgaW50ZXJhY3Rpb24sIG9mZnNldCwgaW5kZXgsIC4uLnVuZXhwZWN0ZWQpID0+IHtcbiAgICBmdW5jQXJncyA9IHsgeCwgeSwgaW50ZXJhY3Rpb24sIG9mZnNldCwgaW5kZXgsIHVuZXhwZWN0ZWQgfVxuICAgIHJldHVybiB0YXJnZXQwXG4gIH1cbiAgY29uc3QgcmVsYXRpdmVQb2ludCA9IHsgeDogMCwgeTogMCB9XG4gIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgdGFyZ2V0czogW1xuICAgICAgdGFyZ2V0MCxcbiAgICAgIHRhcmdldEZ1bmMsXG4gICAgXSxcbiAgICByYW5nZTogSW5maW5pdHksXG4gICAgcmVsYXRpdmVQb2ludHM6IFtyZWxhdGl2ZVBvaW50XSxcbiAgICBvcmlnaW46IHsgeDogMCwgeTogMCB9LFxuICB9XG5cbiAgY29uc3Qgc3RhdGUgPSB7XG4gICAgb3B0aW9ucyxcbiAgICBkZWx0YTogeyB4OiAwLCB5OiAwIH0sXG4gIH1cbiAgY29uc3QgcGFnZUNvb3JkcyA9IE9iamVjdC5mcmVlemUoeyB4OiAxMCwgeTogMjAgfSlcbiAgY29uc3QgYXJnID0ge1xuICAgIGludGVyYWN0aW9uLFxuICAgIHN0YXRlLFxuICAgIHBhZ2VDb29yZHMsXG4gICAgY29vcmRzOiB7IC4uLnBhZ2VDb29yZHMgfSxcbiAgICByZWN0OiB7IHRvcDogMCwgbGVmdDogMCwgYm90dG9tOiAxMDAsIHJpZ2h0OiAxMDAsIHdpZHRoOiAxMDAsIGhlaWdodDogMTAwIH0sXG4gICAgc3RhcnRPZmZzZXQ6IHsgdG9wOiAwLCBsZWZ0OiAwLCBib3R0b206IDAsIHJpZ2h0OiAwIH0sXG4gIH0gYXMgYW55XG5cbiAgc25hcC5zdGFydChhcmcpXG4gIHNuYXAuc2V0KGFyZylcblxuICB0LmRlZXBFcXVhbChcbiAgICBhcmcuY29vcmRzLFxuICAgIHRhcmdldDAsXG4gICAgJ3NuYXAuc2V0IHNpbmdsZSB0YXJnZXQsIHplcmVvIG9mZnNldCdcbiAgKVxuXG4gIHQuZGVlcEVxdWFsKFxuICAgIGZ1bmNBcmdzLFxuICAgIHtcbiAgICAgIHg6IHBhZ2VDb29yZHMueCxcbiAgICAgIHk6IHBhZ2VDb29yZHMueSxcbiAgICAgIGludGVyYWN0aW9uLFxuICAgICAgb2Zmc2V0OiB7XG4gICAgICAgIHg6IHJlbGF0aXZlUG9pbnQueCxcbiAgICAgICAgeTogcmVsYXRpdmVQb2ludC55LFxuICAgICAgICByZWxhdGl2ZVBvaW50LFxuICAgICAgICBpbmRleDogMCxcbiAgICAgIH0sXG4gICAgICBpbmRleDogMSxcbiAgICAgIHVuZXhwZWN0ZWQ6IFtdLFxuICAgIH0sXG4gICAgJyB4LCB5LCBpbnRlcmFjdGlvbiwgb2Zmc2V0LCBpbmRleCBhcmUgcGFzc2VkIHRvIHRhcmdldCBmdW5jdGlvbidcbiAgKVxuXG4gIHQuZW5kKClcbn0pXG4iXX0=