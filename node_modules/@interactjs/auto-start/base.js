import * as utils from '@interactjs/utils';
import InteractableMethods from './InteractableMethods';
function install(scope) {
    const { interact, interactions, defaults, } = scope;
    InteractableMethods.install(scope);
    // set cursor style on mousedown
    interactions.signals.on('down', ({ interaction, pointer, event, eventTarget }) => {
        if (interaction.interacting()) {
            return;
        }
        const actionInfo = getActionInfo(interaction, pointer, event, eventTarget, scope);
        prepare(interaction, actionInfo, scope);
    });
    // set cursor style on mousemove
    interactions.signals.on('move', ({ interaction, pointer, event, eventTarget }) => {
        if (interaction.pointerType !== 'mouse' ||
            interaction.pointerIsDown ||
            interaction.interacting()) {
            return;
        }
        const actionInfo = getActionInfo(interaction, pointer, event, eventTarget, scope);
        prepare(interaction, actionInfo, scope);
    });
    interactions.signals.on('move', (arg) => {
        const { interaction } = arg;
        if (!interaction.pointerIsDown ||
            interaction.interacting() ||
            !interaction.pointerWasMoved ||
            !interaction.prepared.name) {
            return;
        }
        scope.autoStart.signals.fire('before-start', arg);
        const { interactable } = interaction;
        if (interaction.prepared.name && interactable) {
            // check manualStart and interaction limit
            if (interactable.options[interaction.prepared.name].manualStart ||
                !withinInteractionLimit(interactable, interaction.element, interaction.prepared, scope)) {
                interaction.stop();
            }
            else {
                interaction.start(interaction.prepared, interactable, interaction.element);
            }
        }
    });
    interactions.signals.on('stop', ({ interaction }) => {
        const { interactable } = interaction;
        if (interactable && interactable.options.styleCursor) {
            setCursor(interaction.element, '', scope);
        }
    });
    defaults.base.actionChecker = null;
    defaults.base.styleCursor = true;
    utils.extend(defaults.perAction, {
        manualStart: false,
        max: Infinity,
        maxPerElement: 1,
        allowFrom: null,
        ignoreFrom: null,
        // only allow left button by default
        // see https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons#Return_value
        mouseButtons: 1,
    });
    /**
     * Returns or sets the maximum number of concurrent interactions allowed.  By
     * default only 1 interaction is allowed at a time (for backwards
     * compatibility). To allow multiple interactions on the same Interactables and
     * elements, you need to enable it in the draggable, resizable and gesturable
     * `'max'` and `'maxPerElement'` options.
     *
     * @alias module:interact.maxInteractions
     *
     * @param {number} [newValue] Any number. newValue <= 0 means no interactions.
     */
    interact.maxInteractions = (newValue) => maxInteractions(newValue, scope);
    scope.autoStart = {
        // Allow this many interactions to happen simultaneously
        maxInteractions: Infinity,
        withinInteractionLimit,
        cursorElement: null,
        signals: new utils.Signals(),
    };
}
// Check if the current interactable supports the action.
// If so, return the validated action. Otherwise, return null
function validateAction(action, interactable, element, eventTarget, scope) {
    if (interactable.testIgnoreAllow(interactable.options[action.name], element, eventTarget) &&
        interactable.options[action.name].enabled &&
        withinInteractionLimit(interactable, element, action, scope)) {
        return action;
    }
    return null;
}
function validateMatches(interaction, pointer, event, matches, matchElements, eventTarget, scope) {
    for (let i = 0, len = matches.length; i < len; i++) {
        const match = matches[i];
        const matchElement = matchElements[i];
        const matchAction = match.getAction(pointer, event, interaction, matchElement);
        if (!matchAction) {
            continue;
        }
        const action = validateAction(matchAction, match, matchElement, eventTarget, scope);
        if (action) {
            return {
                action,
                interactable: match,
                element: matchElement,
            };
        }
    }
    return { action: null, interactable: null, element: null };
}
function getActionInfo(interaction, pointer, event, eventTarget, scope) {
    let matches = [];
    let matchElements = [];
    let element = eventTarget;
    function pushMatches(interactable) {
        matches.push(interactable);
        matchElements.push(element);
    }
    while (utils.is.element(element)) {
        matches = [];
        matchElements = [];
        scope.interactables.forEachMatch(element, pushMatches);
        const actionInfo = validateMatches(interaction, pointer, event, matches, matchElements, eventTarget, scope);
        if (actionInfo.action &&
            !actionInfo.interactable.options[actionInfo.action.name].manualStart) {
            return actionInfo;
        }
        element = utils.dom.parentNode(element);
    }
    return { action: null, interactable: null, element: null };
}
function prepare(interaction, { action, interactable, element }, scope) {
    action = action || {};
    if (interaction.interactable && interaction.interactable.options.styleCursor) {
        setCursor(interaction.element, '', scope);
    }
    interaction.interactable = interactable;
    interaction.element = element;
    utils.copyAction(interaction.prepared, action);
    interaction.rect = interactable && action.name
        ? interactable.getRect(element)
        : null;
    if (interactable && interactable.options.styleCursor) {
        const cursor = action ? scope.actions[action.name].getCursor(action) : '';
        setCursor(interaction.element, cursor, scope);
    }
    scope.autoStart.signals.fire('prepared', { interaction });
}
function withinInteractionLimit(interactable, element, action, scope) {
    const options = interactable.options;
    const maxActions = options[action.name].max;
    const maxPerElement = options[action.name].maxPerElement;
    const autoStartMax = scope.autoStart.maxInteractions;
    let activeInteractions = 0;
    let interactableCount = 0;
    let elementCount = 0;
    // no actions if any of these values == 0
    if (!(maxActions && maxPerElement && autoStartMax)) {
        return false;
    }
    for (const interaction of scope.interactions.list) {
        const otherAction = interaction.prepared.name;
        if (!interaction.interacting()) {
            continue;
        }
        activeInteractions++;
        if (activeInteractions >= autoStartMax) {
            return false;
        }
        if (interaction.interactable !== interactable) {
            continue;
        }
        interactableCount += otherAction === action.name ? 1 : 0;
        if (interactableCount >= maxActions) {
            return false;
        }
        if (interaction.element === element) {
            elementCount++;
            if (otherAction === action.name && elementCount >= maxPerElement) {
                return false;
            }
        }
    }
    return autoStartMax > 0;
}
function maxInteractions(newValue, scope) {
    if (utils.is.number(newValue)) {
        scope.autoStart.maxInteractions = newValue;
        return this;
    }
    return scope.autoStart.maxInteractions;
}
function setCursor(element, cursor, scope) {
    if (scope.autoStart.cursorElement) {
        scope.autoStart.cursorElement.style.cursor = '';
    }
    element.ownerDocument.documentElement.style.cursor = cursor;
    element.style.cursor = cursor;
    scope.autoStart.cursorElement = cursor ? element : null;
}
export default {
    install,
    maxInteractions,
    withinInteractionLimit,
    validateAction,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImJhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLEtBQUssTUFBTSxtQkFBbUIsQ0FBQTtBQUMxQyxPQUFPLG1CQUFtQixNQUFNLHVCQUF1QixDQUFBO0FBMEN2RCxTQUFTLE9BQU8sQ0FBRSxLQUFxQjtJQUNyQyxNQUFNLEVBQ0osUUFBUSxFQUNSLFlBQVksRUFDWixRQUFRLEdBQ1QsR0FBRyxLQUFLLENBQUE7SUFFVCxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUE7SUFFbEMsZ0NBQWdDO0lBQ2hDLFlBQVksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsV0FBVyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLEVBQUUsRUFBRTtRQUMvRSxJQUFJLFdBQVcsQ0FBQyxXQUFXLEVBQUUsRUFBRTtZQUFFLE9BQU07U0FBRTtRQUV6QyxNQUFNLFVBQVUsR0FBRyxhQUFhLENBQUMsV0FBVyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLEtBQUssQ0FBQyxDQUFBO1FBQ2pGLE9BQU8sQ0FBQyxXQUFXLEVBQUUsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFBO0lBQ3pDLENBQUMsQ0FBQyxDQUFBO0lBRUYsZ0NBQWdDO0lBQ2hDLFlBQVksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsV0FBVyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLEVBQUUsRUFBRTtRQUMvRSxJQUFJLFdBQVcsQ0FBQyxXQUFXLEtBQUssT0FBTztZQUNuQyxXQUFXLENBQUMsYUFBYTtZQUN6QixXQUFXLENBQUMsV0FBVyxFQUFFLEVBQUU7WUFBRSxPQUFNO1NBQUU7UUFFekMsTUFBTSxVQUFVLEdBQUcsYUFBYSxDQUFDLFdBQVcsRUFBRSxPQUFPLEVBQUUsS0FBSyxF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QUksV0FBVyxLQUFLLE1BQU0sQ0FBQyxJQUFJLElBQUksWUFBWSxJQUFJLGFBQWEsRUFBRTtnQkFDaEUsT0FBTyxLQUFLLENBQUE7YUFDYjtTQUNGO0tBQ0Y7SUFFRCxPQUFPLFlBQVksR0FBRyxDQUFDLENBQUE7QUFDekIsQ0FBQztBQUVELFNBQVMsZUFBZSxDQUFFLFFBQVEsRUFBRSxLQUFxQjtJQUN2RCxJQUFJLEtBQUssQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1FBQzdCLEtBQUssQ0FBQyxTQUFTLENBQUMsZUFBZSxHQUFHLFFBQVEsQ0FBQTtRQUUxQyxPQUFPLElBQUksQ0FBQTtLQUNaO0lBRUQsT0FBTyxLQUFLLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQTtBQUN4QyxDQUFDO0FBRUQsU0FBUyxTQUFTLENBQUUsT0FBb0IsRUFBRSxNQUFNLEVBQUUsS0FBcUI7SUFDckUsSUFBSSxLQUFLLENBQUMsU0FBUyxDQUFDLGFBQWEsRUFBRTtRQUNqQyxLQUFLLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQTtLQUNoRDtJQUVELE9BQU8sQ0FBQyxhQUFhLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFBO0lBQzNELE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQTtJQUM3QixLQUFLLENBQUMsU0FBUyxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFBO0FBQ3pELENBQUM7QUFFRCxlQUFlO0lBQ2IsT0FBTztJQUNQLGVBQWU7SUFDZixzQkFBc0I7SUFDdEIsY0FBYztDQUNmLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyB1dGlscyBmcm9tICdAaW50ZXJhY3Rqcy91dGlscydcbmltcG9ydCBJbnRlcmFjdGFibGVNZXRob2RzIGZyb20gJy4vSW50ZXJhY3RhYmxlTWV0aG9kcydcblxuZGVjbGFyZSBtb2R1bGUgJ0BpbnRlcmFjdGpzL2ludGVyYWN0L2ludGVyYWN0JyB7XG4gIGludGVyZmFjZSBJbnRlcmFjdFN0YXRpYyB7XG4gICAgbWF4SW50ZXJhY3Rpb25zOiAobmV3VmFsdWU6IGFueSkgPT4gYW55XG4gIH1cbn1cblxuZGVjbGFyZSBtb2R1bGUgJ0BpbnRlcmFjdGpzL2NvcmUvc2NvcGUnIHtcbiAgaW50ZXJmYWNlIFNjb3BlIHtcbiAgICBhdXRvU3RhcnQ6IEF1dG9TdGFydFxuICAgIG1heEludGVyYWN0aW9uczogKC4uLmFyZ3M6IGFueSkgPT4gYW55XG4gIH1cbn1cblxuZGVjbGFyZSBtb2R1bGUgJ0BpbnRlcmFjdGpzL2NvcmUvZGVmYXVsdE9wdGlvbnMnIHtcbiAgaW50ZXJmYWNlIEJhc2VEZWZhdWx0cyB7XG4gICAgYWN0aW9uQ2hlY2tlcj9cbiAgICBzdHlsZUN1cnNvcj9cbiAgfVxuXG4gIGludGVyZmFjZSBQZXJBY3Rpb25EZWZhdWx0cyB7XG4gICAgbWFudWFsU3RhcnQ/OiBib29sZWFuXG4gICAgbWF4PzogbnVtYmVyXG4gICAgbWF4UGVyRWxlbWVudD86IG51bWJlclxuICAgIGFsbG93RnJvbT86IHN0cmluZyB8IEVsZW1lbnRcbiAgICBpZ25vcmVGcm9tPzogc3RyaW5nIHwgRWxlbWVudFxuXG4gICAgLy8gb25seSBhbGxvdyBsZWZ0IGJ1dHRvbiBieSBkZWZhdWx0XG4gICAgLy8gc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9Nb3VzZUV2ZW50L2J1dHRvbnMjUmV0dXJuX3ZhbHVlXG4gICAgbW91c2VCdXR0b25zPzogMCB8IDEgfCAyIHwgNCB8IDE2XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBBdXRvU3RhcnQge1xuICAvLyBBbGxvdyB0aGlzIG1hbnkgaW50ZXJhY3Rpb25zIHRvIGhhcHBlbiBzaW11bHRhbmVvdXNseVxuICBtYXhJbnRlcmFjdGlvbnM6IG51bWJlclxuICB3aXRoaW5JbnRlcmFjdGlvbkxpbWl0OiB0eXBlb2Ygd2l0aGluSW50ZXJhY3Rpb25MaW1pdFxuICBjdXJzb3JFbGVtZW50OiBIVE1MRWxlbWVudFxuICBzaWduYWxzOiB1dGlscy5TaWduYWxzXG59XG5cbmZ1bmN0aW9uIGluc3RhbGwgKHNjb3BlOiBJbnRlcmFjdC5TY29wZSkge1xuICBjb25zdCB7XG4gICAgaW50ZXJhY3QsXG4gICAgaW50ZXJhY3Rpb25zLFxuICAgIGRlZmF1bHRzLFxuICB9ID0gc2NvcGVcblxuICBJbnRlcmFjdGFibGVNZXRob2RzLmluc3RhbGwoc2NvcGUpXG5cbiAgLy8gc2V0IGN1cnNvciBzdHlsZSBvbiBtb3VzZWRvd25cbiAgaW50ZXJhY3Rpb25zLnNpZ25hbHMub24oJ2Rvd24nLCAoeyBpbnRlcmFjdGlvbiwgcG9pbnRlciwgZXZlbnQsIGV2ZW50VGFyZ2V0IH0pID0+IHtcbiAgICBpZiAoaW50ZXJhY3Rpb24uaW50ZXJhY3RpbmcoKSkgeyByZXR1cm4gfVxuXG4gICAgY29uc3QgYWN0aW9uSW5mbyA9IGdldEFjdGlvbkluZm8oaW50ZXJhY3Rpb24sIHBvaW50ZXIsIGV2ZW50LCBldmVudFRhcmdldCwgc2NvcGUpXG4gICAgcHJlcGFyZShpbnRlcmFjdGlvbiwgYWN0aW9uSW5mbywgc2NvcGUpXG4gIH0pXG5cbiAgLy8gc2V0IGN1cnNvciBzdHlsZSBvbiBtb3VzZW1vdmVcbiAgaW50ZXJhY3Rpb25zLnNpZ25hbHMub24oJ21vdmUnLCAoeyBpbnRlcmFjdGlvbiwgcG9pbnRlciwgZXZlbnQsIGV2ZW50VGFyZ2V0IH0pID0+IHtcbiAgICBpZiAoaW50ZXJhY3Rpb24ucG9pbnRlclR5cGUgIT09ICdtb3VzZScgfHxcbiAgICAgICAgaW50ZXJhY3Rpb24ucG9pbnRlcklzRG93biB8fFxuICAgICAgICBpbnRlcmFjdGlvbi5pbnRlcmFjdGluZygpKSB7IHJldHVybiB9XG5cbiAgICBjb25zdCBhY3Rpb25JbmZvID0gZ2V0QWN0aW9uSW5mbyhpbnRlcmFjdGlvbiwgcG9pbnRlciwgZXZlbnQsIGV2ZW50VGFyZ2V0LCBzY29wZSlcbiAgICBwcmVwYXJlKGludGVyYWN0aW9uLCBhY3Rpb25JbmZvLCBzY29wZSlcbiAgfSlcblxuICBpbnRlcmFjdGlvbnMuc2lnbmFscy5vbignbW92ZScsIChhcmcpID0+IHtcbiAgICBjb25zdCB7IGludGVyYWN0aW9uIH0gPSBhcmdcblxuICAgIGlmICghaW50ZXJhY3Rpb24ucG9pbnRlcklzRG93biB8fFxuICAgICAgICBpbnRlcmFjdGlvbi5pbnRlcmFjdGluZygpIHx8XG4gICAgICAgICFpbnRlcmFjdGlvbi5wb2ludGVyV2FzTW92ZWQgfHxcbiAgICAgICAgIWludGVyYWN0aW9uLnByZXBhcmVkLm5hbWUpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHNjb3BlLmF1dG9TdGFydC5zaWduYWxzLmZpcmUoJ2JlZm9yZS1zdGFydCcsIGFyZylcblxuICAgIGNvbnN0IHsgaW50ZXJhY3RhYmxlIH0gPSBpbnRlcmFjdGlvblxuXG4gICAgaWYgKGludGVyYWN0aW9uLnByZXBhcmVkLm5hbWUgJiYgaW50ZXJhY3RhYmxlKSB7XG4gICAgICAvLyBjaGVjayBtYW51YWxTdGFydCBhbmQgaW50ZXJhY3Rpb24gbGltaXRcbiAgICAgIGlmIChpbnRlcmFjdGFibGUub3B0aW9uc1tpbnRlcmFjdGlvbi5wcmVwYXJlZC5uYW1lXS5tYW51YWxTdGFydCB8fFxuICAgICAgICAgICF3aXRoaW5JbnRlcmFjdGlvbkxpbWl0KGludGVyYWN0YWJsZSwgaW50ZXJhY3Rpb24uZWxlbWVudCwgaW50ZXJhY3Rpb24ucHJlcGFyZWQsIHNjb3BlKSkge1xuICAgICAgICBpbnRlcmFjdGlvbi5zdG9wKClcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBpbnRlcmFjdGlvbi5zdGFydChpbnRlcmFjdGlvbi5wcmVwYXJlZCwgaW50ZXJhY3RhYmxlLCBpbnRlcmFjdGlvbi5lbGVtZW50KVxuICAgICAgfVxuICAgIH1cbiAgfSlcblxuICBpbnRlcmFjdGlvbnMuc2lnbmFscy5vbignc3RvcCcsICh7IGludGVyYWN0aW9uIH0pID0+IHtcbiAgICBjb25zdCB7IGludGVyYWN0YWJsZSB9ID0gaW50ZXJhY3Rpb25cblxuICAgIGlmIChpbnRlcmFjdGFibGUgJiYgaW50ZXJhY3RhYmxlLm9wdGlvbnMuc3R5bGVDdXJzb3IpIHtcbiAgICAgIHNldEN1cnNvcihpbnRlcmFjdGlvbi5lbGVtZW50IGFzIEhUTUxFbGVtZW50LCAnJywgc2NvcGUpXG4gICAgfVxuICB9KVxuXG4gIGRlZmF1bHRzLmJhc2UuYWN0aW9uQ2hlY2tlciA9IG51bGxcbiAgZGVmYXVsdHMuYmFzZS5zdHlsZUN1cnNvciA9IHRydWVcblxuICB1dGlscy5leHRlbmQoZGVmYXVsdHMucGVyQWN0aW9uLCB7XG4gICAgbWFudWFsU3RhcnQ6IGZhbHNlLFxuICAgIG1heDogSW5maW5pdHksXG4gICAgbWF4UGVyRWxlbWVudDogMSxcbiAgICBhbGxvd0Zyb206ICBudWxsLFxuICAgIGlnbm9yZUZyb206IG51bGwsXG5cbiAgICAvLyBvbmx5IGFsbG93IGxlZnQgYnV0dG9uIGJ5IGRlZmF1bHRcbiAgICAvLyBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL01vdXNlRXZlbnQvYnV0dG9ucyNSZXR1cm5fdmFsdWVcbiAgICBtb3VzZUJ1dHRvbnM6IDEsXG4gIH0pXG5cbiAgLyoqXG4gICAqIFJldHVybnMgb3Igc2V0cyB0aGUgbWF4aW11bSBudW1iZXIgb2YgY29uY3VycmVudCBpbnRlcmFjdGlvbnMgYWxsb3dlZC4gIEJ5XG4gICAqIGRlZmF1bHQgb25seSAxIGludGVyYWN0aW9uIGlzIGFsbG93ZWQgYXQgYSB0aW1lIChmb3IgYmFja3dhcmRzXG4gICAqIGNvbXBhdGliaWxpdHkpLiBUbyBhbGxvdyBtdWx0aXBsZSBpbnRlcmFjdGlvbnMgb24gdGhlIHNhbWUgSW50ZXJhY3RhYmxlcyBhbmRcbiAgICogZWxlbWVudHMsIHlvdSBuZWVkIHRvIGVuYWJsZSBpdCBpbiB0aGUgZHJhZ2dhYmxlLCByZXNpemFibGUgYW5kIGdlc3R1cmFibGVcbiAgICogYCdtYXgnYCBhbmQgYCdtYXhQZXJFbGVtZW50J2Agb3B0aW9ucy5cbiAgICpcbiAgICogQGFsaWFzIG1vZHVsZTppbnRlcmFjdC5tYXhJbnRlcmFjdGlvbnNcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtuZXdWYWx1ZV0gQW55IG51bWJlci4gbmV3VmFsdWUgPD0gMCBtZWFucyBubyBpbnRlcmFjdGlvbnMuXG4gICAqL1xuICBpbnRlcmFjdC5tYXhJbnRlcmFjdGlvbnMgPSAobmV3VmFsdWUpID0+IG1heEludGVyYWN0aW9ucyhuZXdWYWx1ZSwgc2NvcGUpXG5cbiAgc2NvcGUuYXV0b1N0YXJ0ID0ge1xuICAgIC8vIEFsbG93IHRoaXMgbWFueSBpbnRlcmFjdGlvbnMgdG8gaGFwcGVuIHNpbXVsdGFuZW91c2x5XG4gICAgbWF4SW50ZXJhY3Rpb25zOiBJbmZpbml0eSxcbiAgICB3aXRoaW5JbnRlcmFjdGlvbkxpbWl0LFxuICAgIGN1cnNvckVsZW1lbnQ6IG51bGwsXG4gICAgc2lnbmFsczogbmV3IHV0aWxzLlNpZ25hbHMoKSxcbiAgfVxufVxuXG4vLyBDaGVjayBpZiB0aGUgY3VycmVudCBpbnRlcmFjdGFibGUgc3VwcG9ydHMgdGhlIGFjdGlvbi5cbi8vIElmIHNvLCByZXR1cm4gdGhlIHZhbGlkYXRlZCBhY3Rpb24uIE90aGVyd2lzZSwgcmV0dXJuIG51bGxcbmZ1bmN0aW9uIHZhbGlkYXRlQWN0aW9uIChhY3Rpb24sIGludGVyYWN0YWJsZSwgZWxlbWVudCwgZXZlbnRUYXJnZXQsIHNjb3BlKSB7XG4gIGlmIChpbnRlcmFjdGFibGUudGVzdElnbm9yZUFsbG93KGludGVyYWN0YWJsZS5vcHRpb25zW2FjdGlvbi5uYW1lXSwgZWxlbWVudCwgZXZlbnRUYXJnZXQpICYmXG4gICAgICBpbnRlcmFjdGFibGUub3B0aW9uc1thY3Rpb24ubmFtZV0uZW5hYmxlZCAmJlxuICAgICAgd2l0aGluSW50ZXJhY3Rpb25MaW1pdChpbnRlcmFjdGFibGUsIGVsZW1lbnQsIGFjdGlvbiwgc2NvcGUpKSB7XG4gICAgcmV0dXJuIGFjdGlvblxuICB9XG5cbiAgcmV0dXJuIG51bGxcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVNYXRjaGVzIChpbnRlcmFjdGlvbjogSW50ZXJhY3QuSW50ZXJhY3Rpb24sIHBvaW50ZXIsIGV2ZW50LCBtYXRjaGVzOiBJbnRlcmFjdC5JbnRlcmFjdGFibGVbXSwgbWF0Y2hFbGVtZW50czogRWxlbWVudFtdLCBldmVudFRhcmdldDogRWxlbWVudCwgc2NvcGU6IEludGVyYWN0LlNjb3BlKSB7XG4gIGZvciAobGV0IGkgPSAwLCBsZW4gPSBtYXRjaGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgY29uc3QgbWF0Y2ggPSBtYXRjaGVzW2ldXG4gICAgY29uc3QgbWF0Y2hFbGVtZW50ID0gbWF0Y2hFbGVtZW50c1tpXVxuICAgIGNvbnN0IG1hdGNoQWN0aW9uID0gbWF0Y2guZ2V0QWN0aW9uKHBvaW50ZXIsIGV2ZW50LCBpbnRlcmFjdGlvbiwgbWF0Y2hFbGVtZW50KVxuXG4gICAgaWYgKCFtYXRjaEFjdGlvbikgeyBjb250aW51ZSB9XG5cbiAgICBjb25zdCBhY3Rpb24gPSB2YWxpZGF0ZUFjdGlvbihcbiAgICAgIG1hdGNoQWN0aW9uLFxuICAgICAgbWF0Y2gsXG4gICAgICBtYXRjaEVsZW1lbnQsXG4gICAgICBldmVudFRhcmdldCxcbiAgICAgIHNjb3BlKVxuXG4gICAgaWYgKGFjdGlvbikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYWN0aW9uLFxuICAgICAgICBpbnRlcmFjdGFibGU6IG1hdGNoLFxuICAgICAgICBlbGVtZW50OiBtYXRjaEVsZW1lbnQsXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHsgYWN0aW9uOiBudWxsLCBpbnRlcmFjdGFibGU6IG51bGwsIGVsZW1lbnQ6IG51bGwgfVxufVxuXG5mdW5jdGlvbiBnZXRBY3Rpb25JbmZvIChpbnRlcmFjdGlvbjogSW50ZXJhY3QuSW50ZXJhY3Rpb24sIHBvaW50ZXI6IEludGVyYWN0LlBvaW50ZXJUeXBlLCBldmVudDogSW50ZXJhY3QuUG9pbnRlckV2ZW50VHlwZSwgZXZlbnRUYXJnZXQ6IEVsZW1lbnQsIHNjb3BlOiBJbnRlcmFjdC5TY29wZSkge1xuICBsZXQgbWF0Y2hlcyA9IFtdXG4gIGxldCBtYXRjaEVsZW1lbnRzID0gW11cblxuICBsZXQgZWxlbWVudCA9IGV2ZW50VGFyZ2V0XG5cbiAgZnVuY3Rpb24gcHVzaE1hdGNoZXMgKGludGVyYWN0YWJsZSkge1xuICAgIG1hdGNoZXMucHVzaChpbnRlcmFjdGFibGUpXG4gICAgbWF0Y2hFbGVtZW50cy5wdXNoKGVsZW1lbnQpXG4gIH1cblxuICB3aGlsZSAodXRpbHMuaXMuZWxlbWVudChlbGVtZW50KSkge1xuICAgIG1hdGNoZXMgPSBbXVxuICAgIG1hdGNoRWxlbWVudHMgPSBbXVxuXG4gICAgc2NvcGUuaW50ZXJhY3RhYmxlcy5mb3JFYWNoTWF0Y2goZWxlbWVudCwgcHVzaE1hdGNoZXMpXG5cbiAgICBjb25zdCBhY3Rpb25JbmZvID0gdmFsaWRhdGVNYXRjaGVzKGludGVyYWN0aW9uLCBwb2ludGVyLCBldmVudCwgbWF0Y2hlcywgbWF0Y2hFbGVtZW50cywgZXZlbnRUYXJnZXQsIHNjb3BlKVxuXG4gICAgaWYgKGFjdGlvbkluZm8uYWN0aW9uICYmXG4gICAgICAhYWN0aW9uSW5mby5pbnRlcmFjdGFibGUub3B0aW9uc1thY3Rpb25JbmZvLmFjdGlvbi5uYW1lXS5tYW51YWxTdGFydCkge1xuICAgICAgcmV0dXJuIGFjdGlvbkluZm9cbiAgICB9XG5cbiAgICBlbGVtZW50ID0gdXRpbHMuZG9tLnBhcmVudE5vZGUoZWxlbWVudClcbiAgfVxuXG4gIHJldHVybiB7IGFjdGlvbjogbnVsbCwgaW50ZXJhY3RhYmxlOiBudWxsLCBlbGVtZW50OiBudWxsIH1cbn1cblxuZnVuY3Rpb24gcHJlcGFyZSAoaW50ZXJhY3Rpb246IEludGVyYWN0LkludGVyYWN0aW9uLCB7IGFjdGlvbiwgaW50ZXJhY3RhYmxlLCBlbGVtZW50IH0sIHNjb3BlOiBJbnRlcmFjdC5TY29wZSkge1xuICBhY3Rpb24gPSBhY3Rpb24gfHwge31cblxuICBpZiAoaW50ZXJhY3Rpb24uaW50ZXJhY3RhYmxlICYmIGludGVyYWN0aW9uLmludGVyYWN0YWJsZS5vcHRpb25zLnN0eWxlQ3Vyc29yKSB7XG4gICAgc2V0Q3Vyc29yKGludGVyYWN0aW9uLmVsZW1lbnQgYXMgSFRNTEVsZW1lbnQsICcnLCBzY29wZSlcbiAgfVxuXG4gIGludGVyYWN0aW9uLmludGVyYWN0YWJsZSA9IGludGVyYWN0YWJsZVxuICBpbnRlcmFjdGlvbi5lbGVtZW50ID0gZWxlbWVudFxuICB1dGlscy5jb3B5QWN0aW9uKGludGVyYWN0aW9uLnByZXBhcmVkLCBhY3Rpb24pXG5cbiAgaW50ZXJhY3Rpb24ucmVjdCA9IGludGVyYWN0YWJsZSAmJiBhY3Rpb24ubmFtZVxuICAgID8gaW50ZXJhY3RhYmxlLmdldFJlY3QoZWxlbWVudClcbiAgICA6IG51bGxcblxuICBpZiAoaW50ZXJhY3RhYmxlICYmIGludGVyYWN0YWJsZS5vcHRpb25zLnN0eWxlQ3Vyc29yKSB7XG4gICAgY29uc3QgY3Vyc29yID0gYWN0aW9uID8gc2NvcGUuYWN0aW9uc1thY3Rpb24ubmFtZV0uZ2V0Q3Vyc29yKGFjdGlvbikgOiAnJ1xuICAgIHNldEN1cnNvcihpbnRlcmFjdGlvbi5lbGVtZW50IGFzIEhUTUxFbGVtZW50LCBjdXJzb3IsIHNjb3BlKVxuICB9XG5cbiAgc2NvcGUuYXV0b1N0YXJ0LnNpZ25hbHMuZmlyZSgncHJlcGFyZWQnLCB7IGludGVyYWN0aW9uIH0pXG59XG5cbmZ1bmN0aW9uIHdpdGhpbkludGVyYWN0aW9uTGltaXQgKGludGVyYWN0YWJsZTogSW50ZXJhY3QuSW50ZXJhY3RhYmxlLCBlbGVtZW50OiBFbGVtZW50LCBhY3Rpb24sIHNjb3BlOiBJbnRlcmFjdC5TY29wZSkge1xuICBjb25zdCBvcHRpb25zID0gaW50ZXJhY3RhYmxlLm9wdGlvbnNcbiAgY29uc3QgbWF4QWN0aW9ucyA9IG9wdGlvbnNbYWN0aW9uLm5hbWVdLm1heFxuICBjb25zdCBtYXhQZXJFbGVtZW50ID0gb3B0aW9uc1thY3Rpb24ubmFtZV0ubWF4UGVyRWxlbWVudFxuICBjb25zdCBhdXRvU3RhcnRNYXggPSBzY29wZS5hdXRvU3RhcnQubWF4SW50ZXJhY3Rpb25zXG4gIGxldCBhY3RpdmVJbnRlcmFjdGlvbnMgPSAwXG4gIGxldCBpbnRlcmFjdGFibGVDb3VudCA9IDBcbiAgbGV0IGVsZW1lbnRDb3VudCA9IDBcblxuICAvLyBubyBhY3Rpb25zIGlmIGFueSBvZiB0aGVzZSB2YWx1ZXMgPT0gMFxuICBpZiAoIShtYXhBY3Rpb25zICYmIG1heFBlckVsZW1lbnQgJiYgYXV0b1N0YXJ0TWF4KSkgeyByZXR1cm4gZmFsc2UgfVxuXG4gIGZvciAoY29uc3QgaW50ZXJhY3Rpb24gb2Ygc2NvcGUuaW50ZXJhY3Rpb25zLmxpc3QpIHtcbiAgICBjb25zdCBvdGhlckFjdGlvbiA9IGludGVyYWN0aW9uLnByZXBhcmVkLm5hbWVcblxuICAgIGlmICghaW50ZXJhY3Rpb24uaW50ZXJhY3RpbmcoKSkgeyBjb250aW51ZSB9XG5cbiAgICBhY3RpdmVJbnRlcmFjdGlvbnMrK1xuXG4gICAgaWYgKGFjdGl2ZUludGVyYWN0aW9ucyA+PSBhdXRvU3RhcnRNYXgpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIGlmIChpbnRlcmFjdGlvbi5pbnRlcmFjdGFibGUgIT09IGludGVyYWN0YWJsZSkgeyBjb250aW51ZSB9XG5cbiAgICBpbnRlcmFjdGFibGVDb3VudCArPSBvdGhlckFjdGlvbiA9PT0gYWN0aW9uLm5hbWUgPyAxIDogMFxuXG4gICAgaWYgKGludGVyYWN0YWJsZUNvdW50ID49IG1heEFjdGlvbnMpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIGlmIChpbnRlcmFjdGlvbi5lbGVtZW50ID09PSBlbGVtZW50KSB7XG4gICAgICBlbGVtZW50Q291bnQrK1xuXG4gICAgICBpZiAob3RoZXJBY3Rpb24gPT09IGFjdGlvbi5uYW1lICYmIGVsZW1lbnRDb3VudCA+PSBtYXhQZXJFbGVtZW50KSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhdXRvU3RhcnRNYXggPiAwXG59XG5cbmZ1bmN0aW9uIG1heEludGVyYWN0aW9ucyAobmV3VmFsdWUsIHNjb3BlOiBJbnRlcmFjdC5TY29wZSkge1xuICBpZiAodXRpbHMuaXMubnVtYmVyKG5ld1ZhbHVlKSkge1xuICAgIHNjb3BlLmF1dG9TdGFydC5tYXhJbnRlcmFjdGlvbnMgPSBuZXdWYWx1ZVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHJldHVybiBzY29wZS5hdXRvU3RhcnQubWF4SW50ZXJhY3Rpb25zXG59XG5cbmZ1bmN0aW9uIHNldEN1cnNvciAoZWxlbWVudDogSFRNTEVsZW1lbnQsIGN1cnNvciwgc2NvcGU6IEludGVyYWN0LlNjb3BlKSB7XG4gIGlmIChzY29wZS5hdXRvU3RhcnQuY3Vyc29yRWxlbWVudCkge1xuICAgIHNjb3BlLmF1dG9TdGFydC5jdXJzb3JFbGVtZW50LnN0eWxlLmN1cnNvciA9ICcnXG4gIH1cblxuICBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLmN1cnNvciA9IGN1cnNvclxuICBlbGVtZW50LnN0eWxlLmN1cnNvciA9IGN1cnNvclxuICBzY29wZS5hdXRvU3RhcnQuY3Vyc29yRWxlbWVudCA9IGN1cnNvciA/IGVsZW1lbnQgOiBudWxsXG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgaW5zdGFsbCxcbiAgbWF4SW50ZXJhY3Rpb25zLFxuICB3aXRoaW5JbnRlcmFjdGlvbkxpbWl0LFxuICB2YWxpZGF0ZUFjdGlvbixcbn1cbiJdfQ==