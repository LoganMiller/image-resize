import test from '@interactjs/_dev/test/test';
import * as helpers from '@interactjs/core/tests/_helpers';
import Signals from '@interactjs/utils/Signals';
import hold from './hold';
import { autoStart } from './index';
test('autoStart/hold', (t) => {
    const scope = helpers.mockScope({
        autoStart: {
            defaults: {
                perAction: {},
            },
            signals: new Signals(),
        },
    });
    const autoStartHold = hold;
    autoStart.install(scope);
    autoStartHold.install(scope);
    t.equal(scope.defaults.perAction.hold, 0, 'sets scope.defaults.perAction.hold');
    t.equal(scope.defaults.perAction.delay, 0, 'backwards compatible "delay" alias.');
    const holdDuration = 1000;
    const actionName = 'TEST_ACTION';
    const interaction = {
        interactable: { options: { [actionName]: { hold: holdDuration } } },
        prepared: { name: actionName },
    };
    t.equal(autoStartHold.getHoldDuration(interaction), holdDuration, 'gets holdDuration');
    const delayDuration = 500;
    interaction.interactable.options[actionName].delay = delayDuration;
    delete interaction.interactable.options[actionName].hold;
    t.equal(autoStartHold.getHoldDuration(interaction), delayDuration, 'gets holdDuration from "delay" value');
    t.end();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9sZC5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaG9sZC5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sSUFBSSxNQUFNLDRCQUE0QixDQUFBO0FBQzdDLE9BQU8sS0FBSyxPQUFPLE1BQU0saUNBQWlDLENBQUE7QUFDMUQsT0FBTyxPQUFPLE1BQU0sMkJBQTJCLENBQUE7QUFDL0MsT0FBTyxJQUFJLE1BQU0sUUFBUSxDQUFBO0FBQ3pCLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxTQUFTLENBQUE7QUFFbkMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUU7SUFDM0IsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQztRQUM5QixTQUFTLEVBQUU7WUFDVCxRQUFRLEVBQUU7Z0JBQ1IsU0FBUyxFQUFFLEVBQUU7YUFDZDtZQUNELE9BQU8sRUFBRSxJQUFJLE9BQU8sRUFBRTtTQUN2QjtLQUNGLENBQUMsQ0FBQTtJQUNGLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQTtJQUMxQixTQUFTLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQ3hCLGFBQWEsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUE7SUFFNUIsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLG9DQUFvQyxDQUFDLENBQUE7SUFDL0UsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLHFDQUFxQyxDQUFDLENBQUE7SUFFakYsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFBO0lBQ3pCLE1BQU0sVUFBVSxHQUFHLGFBQWEsQ0FBQTtJQUNoQyxNQUFNLFdBQVcsR0FBUTtRQUN2QixZQUFZLEVBQUUsRUFBRSxPQUFPLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxFQUFFLEVBQUU7UUFDbkUsUUFBUSxFQUFFLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRTtLQUMvQixDQUFBO0lBRUQsQ0FBQyxDQUFDLEtBQUssQ0FDTCxhQUFhLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQyxFQUMxQyxZQUFZLEVBQ1osbUJBQW1CLENBQUMsQ0FBQTtJQUV0QixNQUFNLGFBQWEsR0FBRyxHQUFHLENBQUE7SUFFekIsV0FBVyxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsS0FBSyxHQUFHLGFBQWEsQ0FBQTtJQUNsRSxPQUFPLFdBQVcsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQTtJQUV4RCxDQUFDLENBQUMsS0FBSyxDQUNMLGFBQWEsQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLEVBQzFDLGFBQWEsRUFDYixzQ0FBc0MsQ0FBQyxDQUFBO0lBRXpDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQTtBQUNULENBQUMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHRlc3QgZnJvbSAnQGludGVyYWN0anMvX2Rldi90ZXN0L3Rlc3QnXG5pbXBvcnQgKiBhcyBoZWxwZXJzIGZyb20gJ0BpbnRlcmFjdGpzL2NvcmUvdGVzdHMvX2hlbHBlcnMnXG5pbXBvcnQgU2lnbmFscyBmcm9tICdAaW50ZXJhY3Rqcy91dGlscy9TaWduYWxzJ1xuaW1wb3J0IGhvbGQgZnJvbSAnLi9ob2xkJ1xuaW1wb3J0IHsgYXV0b1N0YXJ0IH0gZnJvbSAnLi9pbmRleCdcblxudGVzdCgnYXV0b1N0YXJ0L2hvbGQnLCAodCkgPT4ge1xuICBjb25zdCBzY29wZSA9IGhlbHBlcnMubW9ja1Njb3BlKHtcbiAgICBhdXRvU3RhcnQ6IHtcbiAgICAgIGRlZmF1bHRzOiB7XG4gICAgICAgIHBlckFjdGlvbjoge30sXG4gICAgICB9LFxuICAgICAgc2lnbmFsczogbmV3IFNpZ25hbHMoKSxcbiAgICB9LFxuICB9KVxuICBjb25zdCBhdXRvU3RhcnRIb2xkID0gaG9sZFxuICBhdXRvU3RhcnQuaW5zdGFsbChzY29wZSlcbiAgYXV0b1N0YXJ0SG9sZC5pbnN0YWxsKHNjb3BlKVxuXG4gIHQuZXF1YWwoc2NvcGUuZGVmYXVsdHMucGVyQWN0aW9uLmhvbGQsIDAsICdzZXRzIHNjb3BlLmRlZmF1bHRzLnBlckFjdGlvbi5ob2xkJylcbiAgdC5lcXVhbChzY29wZS5kZWZhdWx0cy5wZXJBY3Rpb24uZGVsYXksIDAsICdiYWNrd2FyZHMgY29tcGF0aWJsZSBcImRlbGF5XCIgYWxpYXMuJylcblxuICBjb25zdCBob2xkRHVyYXRpb24gPSAxMDAwXG4gIGNvbnN0IGFjdGlvbk5hbWUgPSAnVEVTVF9BQ1RJT04nXG4gIGNvbnN0IGludGVyYWN0aW9uOiBhbnkgPSB7XG4gICAgaW50ZXJhY3RhYmxlOiB7IG9wdGlvbnM6IHsgW2FjdGlvbk5hbWVdOiB7IGhvbGQ6IGhvbGREdXJhdGlvbiB9IH0gfSxcbiAgICBwcmVwYXJlZDogeyBuYW1lOiBhY3Rpb25OYW1lIH0sXG4gIH1cblxuICB0LmVxdWFsKFxuICAgIGF1dG9TdGFydEhvbGQuZ2V0SG9sZER1cmF0aW9uKGludGVyYWN0aW9uKSxcbiAgICBob2xkRHVyYXRpb24sXG4gICAgJ2dldHMgaG9sZER1cmF0aW9uJylcblxuICBjb25zdCBkZWxheUR1cmF0aW9uID0gNTAwXG5cbiAgaW50ZXJhY3Rpb24uaW50ZXJhY3RhYmxlLm9wdGlvbnNbYWN0aW9uTmFtZV0uZGVsYXkgPSBkZWxheUR1cmF0aW9uXG4gIGRlbGV0ZSBpbnRlcmFjdGlvbi5pbnRlcmFjdGFibGUub3B0aW9uc1thY3Rpb25OYW1lXS5ob2xkXG5cbiAgdC5lcXVhbChcbiAgICBhdXRvU3RhcnRIb2xkLmdldEhvbGREdXJhdGlvbihpbnRlcmFjdGlvbiksXG4gICAgZGVsYXlEdXJhdGlvbixcbiAgICAnZ2V0cyBob2xkRHVyYXRpb24gZnJvbSBcImRlbGF5XCIgdmFsdWUnKVxuXG4gIHQuZW5kKClcbn0pXG4iXX0=