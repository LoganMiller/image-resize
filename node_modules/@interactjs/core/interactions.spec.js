import test from '@interactjs/_dev/test/test';
import Signals from '@interactjs/utils/Signals';
import Interaction from './Interaction';
import interactions from './interactions';
import * as helpers from './tests/_helpers';
test('interactions', (t) => {
    let scope = helpers.mockScope();
    interactions.install(scope);
    const interaction = interactions.newInteraction({ pointerType: 'TEST' }, scope);
    t.equal(scope.interactions.list[0], interaction, 'new Interaction is pushed to scope.interactions');
    interactions.install(scope);
    t.ok(scope.interactions instanceof Object, 'interactions object added to scope');
    const listeners = scope.interactions.listeners;
    t.ok(interactions.methodNames.reduce((acc, m) => acc && typeof listeners[m] === 'function', true), 'interactions object added to scope');
    scope = helpers.mockScope();
    interactions.install(scope);
    const newInteraction = scope.interactions.new({});
    t.assert(typeof scope.interactions === 'object');
    t.assert(scope.interactions.signals instanceof Signals);
    t.assert(typeof scope.interactions.new === 'function');
    t.assert(newInteraction instanceof Interaction);
    t.equal(newInteraction._signals, scope.interactions.signals);
    t.assert(typeof scope.actions === 'object');
    t.deepEqual(scope.actions.names, []);
    t.deepEqual(scope.actions.methodDict, {});
    t.end();
});
test('interactions document event options', (t) => {
    const scope = helpers.mockScope();
    const doc = scope.document;
    let options = {};
    scope.browser = { isIOS: false };
    scope.signals.fire('add-document', { doc, scope, options });
    t.deepEqual(options, {}, 'no doc options.event.passive is added when not iOS');
    options = {};
    scope.browser.isIOS = true;
    scope.signals.fire('add-document', { doc, scope, options });
    t.deepEqual(options, { events: { passive: false } }, 'doc options.event.passive is set to false for iOS');
    t.end();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJhY3Rpb25zLnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbnRlcmFjdGlvbnMuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLElBQUksTUFBTSw0QkFBNEIsQ0FBQTtBQUM3QyxPQUFPLE9BQU8sTUFBTSwyQkFBMkIsQ0FBQTtBQUMvQyxPQUFPLFdBQVcsTUFBTSxlQUFlLENBQUE7QUFDdkMsT0FBTyxZQUFZLE1BQU0sZ0JBQWdCLENBQUE7QUFDekMsT0FBTyxLQUFLLE9BQU8sTUFBTSxrQkFBa0IsQ0FBQTtBQUUzQyxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUU7SUFDekIsSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLFNBQVMsRUFBRSxDQUFBO0lBRS9CLFlBQVksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUE7SUFFM0IsTUFBTSxXQUFXLEdBQUcsWUFBWSxDQUFDLGNBQWMsQ0FDN0MsRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLEVBQ3ZCLEtBQUssQ0FDTixDQUFBO0lBRUQsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxXQUFXLEVBQzdDLGlEQUFpRCxDQUFDLENBQUE7SUFFcEQsWUFBWSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUUzQixDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxZQUFZLFlBQVksTUFBTSxFQUFFLG9DQUFvQyxDQUFDLENBQUE7SUFFaEYsTUFBTSxTQUFTLEdBQUcsS0FBSyxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUE7SUFFOUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUcsSUFBSSxPQUFPLFNBQVMsQ0FBQyxDQUFDLENBQUMsS0FBSyxVQUFVLEVBQUUsSUFBSSxDQUFDLEVBQy9GLG9DQUFvQyxDQUFDLENBQUE7SUFFdkMsS0FBSyxHQUFHLE9BQU8sQ0FBQyxTQUFTLEVBQUUsQ0FBQTtJQUUzQixZQUFZLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQzNCLE1BQU0sY0FBYyxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBRWpELENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxLQUFLLENBQUMsWUFBWSxLQUFLLFFBQVEsQ0FBQyxDQUFBO0lBQ2hELENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxPQUFPLFlBQVksT0FBTyxDQUFDLENBQUE7SUFDdkQsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEtBQUssQ0FBQyxZQUFZLENBQUMsR0FBRyxLQUFLLFVBQVUsQ0FBQyxDQUFBO0lBQ3RELENBQUMsQ0FBQyxNQUFNLENBQUMsY0FBYyxZQUFZLFdBQVcsQ0FBQyxDQUFBO0lBQy9DLENBQUMsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBRTVELENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxLQUFLLENBQUMsT0FBTyxLQUFLLFFBQVEsQ0FBQyxDQUFBO0lBQzNDLENBQUMsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFDcEMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsQ0FBQTtJQUV6QyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUE7QUFDVCxDQUFDLENBQUMsQ0FBQTtBQUVGLElBQUksQ0FBQyxxQ0FBcUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFO0lBQ2hELE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxTQUFTLEVBQUUsQ0FBQTtJQUNqQyxNQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFBO0lBRTFCLElBQUksT0FBTyxHQUFHLEVBQUUsQ0FBQTtJQUNoQixLQUFLLENBQUMsT0FBTyxHQUFHLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxDQUFBO0lBQ2hDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQTtJQUUzRCxDQUFDLENBQUMsU0FBUyxDQUNULE9BQU8sRUFDUCxFQUFFLEVBQ0Ysb0RBQW9ELENBQUMsQ0FBQTtJQUV2RCxPQUFPLEdBQUcsRUFBRSxDQUFBO0lBRVosS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFBO0lBQzFCLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQTtJQUUzRCxDQUFDLENBQUMsU0FBUyxDQUNULE9BQU8sRUFDUCxFQUFFLE1BQU0sRUFBRSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUM5QixtREFBbUQsQ0FBQyxDQUFBO0lBRXRELENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQTtBQUNULENBQUMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHRlc3QgZnJvbSAnQGludGVyYWN0anMvX2Rldi90ZXN0L3Rlc3QnXG5pbXBvcnQgU2lnbmFscyBmcm9tICdAaW50ZXJhY3Rqcy91dGlscy9TaWduYWxzJ1xuaW1wb3J0IEludGVyYWN0aW9uIGZyb20gJy4vSW50ZXJhY3Rpb24nXG5pbXBvcnQgaW50ZXJhY3Rpb25zIGZyb20gJy4vaW50ZXJhY3Rpb25zJ1xuaW1wb3J0ICogYXMgaGVscGVycyBmcm9tICcuL3Rlc3RzL19oZWxwZXJzJ1xuXG50ZXN0KCdpbnRlcmFjdGlvbnMnLCAodCkgPT4ge1xuICBsZXQgc2NvcGUgPSBoZWxwZXJzLm1vY2tTY29wZSgpXG5cbiAgaW50ZXJhY3Rpb25zLmluc3RhbGwoc2NvcGUpXG5cbiAgY29uc3QgaW50ZXJhY3Rpb24gPSBpbnRlcmFjdGlvbnMubmV3SW50ZXJhY3Rpb24oXG4gICAgeyBwb2ludGVyVHlwZTogJ1RFU1QnIH0sXG4gICAgc2NvcGVcbiAgKVxuXG4gIHQuZXF1YWwoc2NvcGUuaW50ZXJhY3Rpb25zLmxpc3RbMF0sIGludGVyYWN0aW9uLFxuICAgICduZXcgSW50ZXJhY3Rpb24gaXMgcHVzaGVkIHRvIHNjb3BlLmludGVyYWN0aW9ucycpXG5cbiAgaW50ZXJhY3Rpb25zLmluc3RhbGwoc2NvcGUpXG5cbiAgdC5vayhzY29wZS5pbnRlcmFjdGlvbnMgaW5zdGFuY2VvZiBPYmplY3QsICdpbnRlcmFjdGlvbnMgb2JqZWN0IGFkZGVkIHRvIHNjb3BlJylcblxuICBjb25zdCBsaXN0ZW5lcnMgPSBzY29wZS5pbnRlcmFjdGlvbnMubGlzdGVuZXJzXG5cbiAgdC5vayhpbnRlcmFjdGlvbnMubWV0aG9kTmFtZXMucmVkdWNlKChhY2MsIG0pID0+IGFjYyAmJiB0eXBlb2YgbGlzdGVuZXJzW21dID09PSAnZnVuY3Rpb24nLCB0cnVlKSxcbiAgICAnaW50ZXJhY3Rpb25zIG9iamVjdCBhZGRlZCB0byBzY29wZScpXG5cbiAgc2NvcGUgPSBoZWxwZXJzLm1vY2tTY29wZSgpXG5cbiAgaW50ZXJhY3Rpb25zLmluc3RhbGwoc2NvcGUpXG4gIGNvbnN0IG5ld0ludGVyYWN0aW9uID0gc2NvcGUuaW50ZXJhY3Rpb25zLm5ldyh7fSlcblxuICB0LmFzc2VydCh0eXBlb2Ygc2NvcGUuaW50ZXJhY3Rpb25zID09PSAnb2JqZWN0JylcbiAgdC5hc3NlcnQoc2NvcGUuaW50ZXJhY3Rpb25zLnNpZ25hbHMgaW5zdGFuY2VvZiBTaWduYWxzKVxuICB0LmFzc2VydCh0eXBlb2Ygc2NvcGUuaW50ZXJhY3Rpb25zLm5ldyA9PT0gJ2Z1bmN0aW9uJylcbiAgdC5hc3NlcnQobmV3SW50ZXJhY3Rpb24gaW5zdGFuY2VvZiBJbnRlcmFjdGlvbilcbiAgdC5lcXVhbChuZXdJbnRlcmFjdGlvbi5fc2lnbmFscywgc2NvcGUuaW50ZXJhY3Rpb25zLnNpZ25hbHMpXG5cbiAgdC5hc3NlcnQodHlwZW9mIHNjb3BlLmFjdGlvbnMgPT09ICdvYmplY3QnKVxuICB0LmRlZXBFcXVhbChzY29wZS5hY3Rpb25zLm5hbWVzLCBbXSlcbiAgdC5kZWVwRXF1YWwoc2NvcGUuYWN0aW9ucy5tZXRob2REaWN0LCB7fSlcblxuICB0LmVuZCgpXG59KVxuXG50ZXN0KCdpbnRlcmFjdGlvbnMgZG9jdW1lbnQgZXZlbnQgb3B0aW9ucycsICh0KSA9PiB7XG4gIGNvbnN0IHNjb3BlID0gaGVscGVycy5tb2NrU2NvcGUoKVxuICBjb25zdCBkb2MgPSBzY29wZS5kb2N1bWVudFxuXG4gIGxldCBvcHRpb25zID0ge31cbiAgc2NvcGUuYnJvd3NlciA9IHsgaXNJT1M6IGZhbHNlIH1cbiAgc2NvcGUuc2lnbmFscy5maXJlKCdhZGQtZG9jdW1lbnQnLCB7IGRvYywgc2NvcGUsIG9wdGlvbnMgfSlcblxuICB0LmRlZXBFcXVhbChcbiAgICBvcHRpb25zLFxuICAgIHt9LFxuICAgICdubyBkb2Mgb3B0aW9ucy5ldmVudC5wYXNzaXZlIGlzIGFkZGVkIHdoZW4gbm90IGlPUycpXG5cbiAgb3B0aW9ucyA9IHt9XG5cbiAgc2NvcGUuYnJvd3Nlci5pc0lPUyA9IHRydWVcbiAgc2NvcGUuc2lnbmFscy5maXJlKCdhZGQtZG9jdW1lbnQnLCB7IGRvYywgc2NvcGUsIG9wdGlvbnMgfSlcblxuICB0LmRlZXBFcXVhbChcbiAgICBvcHRpb25zLFxuICAgIHsgZXZlbnRzOiB7IHBhc3NpdmU6IGZhbHNlIH0gfSxcbiAgICAnZG9jIG9wdGlvbnMuZXZlbnQucGFzc2l2ZSBpcyBzZXQgdG8gZmFsc2UgZm9yIGlPUycpXG5cbiAgdC5lbmQoKVxufSlcbiJdfQ==