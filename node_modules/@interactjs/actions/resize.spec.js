import test from '@interactjs/_dev/test/test';
import * as helpers from '@interactjs/core/tests/_helpers';
import pointerUtils from '@interactjs/utils/pointerUtils';
import resize from './resize';
test('resize', (t) => {
    const scope = helpers.mockScope();
    resize.install(scope);
    t.ok(scope.actions.names.includes('resize'), '"resize" in actions.names');
    t.equal(scope.actions.methodDict.resize, 'resizable');
    t.equal(typeof scope.Interactable.prototype.resizable, 'function', 'Interactable.resizable method is added');
    const page = { x: 0, y: 0 };
    const event = pointerUtils.coordsToEvent({ page, client: page });
    const interactable = scope.interactables.new('test', {})
        .resizable({
        edges: { left: true, top: true, right: true, bottom: true },
        // use margin greater than width and height
        margin: Infinity,
    });
    const interaction = scope.interactions.new({});
    const rect = { left: 0, top: 0, right: 10, bottom: 10 };
    interaction.updatePointer(event, event, {}, true);
    t.deepEqual(scope.actions.resize.checker(event, event, interactable, {}, interaction, rect), {
        name: 'resize',
        edges: { left: true, top: true, right: false, bottom: false },
    });
    page.x = 10;
    interaction.updatePointer(event, event, {}, true);
    t.deepEqual(scope.actions.resize.checker(event, event, interactable, {}, interaction, rect), {
        name: 'resize',
        edges: { left: false, top: true, right: true, bottom: false },
    });
    page.y = 10;
    interaction.updatePointer(event, event, {}, true);
    t.deepEqual(scope.actions.resize.checker(event, event, interactable, {}, interaction, rect), {
        name: 'resize',
        edges: { left: false, top: false, right: true, bottom: true },
    });
    t.end();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzaXplLnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJyZXNpemUuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLElBQUksTUFBTSw0QkFBNEIsQ0FBQTtBQUM3QyxPQUFPLEtBQUssT0FBTyxNQUFNLGlDQUFpQyxDQUFBO0FBQzFELE9BQU8sWUFBWSxNQUFNLGdDQUFnQyxDQUFBO0FBQ3pELE9BQU8sTUFBTSxNQUFNLFVBQVUsQ0FBQTtBQUU3QixJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUU7SUFDbkIsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLFNBQVMsRUFBRSxDQUFBO0lBRWpDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUE7SUFFckIsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEVBQUUsMkJBQTJCLENBQUMsQ0FBQTtJQUN6RSxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxXQUFXLENBQUMsQ0FBQTtJQUNyRCxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sS0FBSyxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSx3Q0FBd0MsQ0FBQyxDQUFBO0lBRTVHLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUE7SUFDM0IsTUFBTSxLQUFLLEdBQUcsWUFBWSxDQUFDLGFBQWEsQ0FBQyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQTtJQUNoRSxNQUFNLFlBQVksR0FBRyxLQUFLLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDO1NBQ3JELFNBQVMsQ0FBQztRQUNULEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7UUFDM0QsMkNBQTJDO1FBQzNDLE1BQU0sRUFBRSxRQUFRO0tBQ2pCLENBQUMsQ0FBQTtJQUNKLE1BQU0sV0FBVyxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBQzlDLE1BQU0sSUFBSSxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxDQUFBO0lBRXZELFdBQVcsQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUE7SUFFakQsQ0FBQyxDQUFDLFNBQVMsQ0FDVCxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxZQUFZLEVBQUUsRUFBRSxFQUFFLFdBQVcsRUFBRSxJQUFJLENBQUMsRUFDL0U7UUFDRSxJQUFJLEVBQUUsUUFBUTtRQUNkLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUU7S0FDOUQsQ0FDRixDQUFBO0lBRUQsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUE7SUFDWCxXQUFXLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFBO0lBRWpELENBQUMsQ0FBQyxTQUFTLENBQ1QsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFFLEVBQUUsRUFBRSxXQUFXLEVBQUUsSUFBSSxDQUFDLEVBQy9FO1FBQ0UsSUFBSSxFQUFFLFFBQVE7UUFDZCxLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFO0tBQzlELENBQ0YsQ0FBQTtJQUVELElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFBO0lBQ1gsV0FBVyxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQTtJQUVqRCxDQUFDLENBQUMsU0FBUyxDQUNULEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBRSxFQUFFLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBQyxFQUMvRTtRQUNFLElBQUksRUFBRSxRQUFRO1FBQ2QsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTtLQUM5RCxDQUNGLENBQUE7SUFFRCxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUE7QUFDVCxDQUFDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0ZXN0IGZyb20gJ0BpbnRlcmFjdGpzL19kZXYvdGVzdC90ZXN0J1xuaW1wb3J0ICogYXMgaGVscGVycyBmcm9tICdAaW50ZXJhY3Rqcy9jb3JlL3Rlc3RzL19oZWxwZXJzJ1xuaW1wb3J0IHBvaW50ZXJVdGlscyBmcm9tICdAaW50ZXJhY3Rqcy91dGlscy9wb2ludGVyVXRpbHMnXG5pbXBvcnQgcmVzaXplIGZyb20gJy4vcmVzaXplJ1xuXG50ZXN0KCdyZXNpemUnLCAodCkgPT4ge1xuICBjb25zdCBzY29wZSA9IGhlbHBlcnMubW9ja1Njb3BlKClcblxuICByZXNpemUuaW5zdGFsbChzY29wZSlcblxuICB0Lm9rKHNjb3BlLmFjdGlvbnMubmFtZXMuaW5jbHVkZXMoJ3Jlc2l6ZScpLCAnXCJyZXNpemVcIiBpbiBhY3Rpb25zLm5hbWVzJylcbiAgdC5lcXVhbChzY29wZS5hY3Rpb25zLm1ldGhvZERpY3QucmVzaXplLCAncmVzaXphYmxlJylcbiAgdC5lcXVhbCh0eXBlb2Ygc2NvcGUuSW50ZXJhY3RhYmxlLnByb3RvdHlwZS5yZXNpemFibGUsICdmdW5jdGlvbicsICdJbnRlcmFjdGFibGUucmVzaXphYmxlIG1ldGhvZCBpcyBhZGRlZCcpXG5cbiAgY29uc3QgcGFnZSA9IHsgeDogMCwgeTogMCB9XG4gIGNvbnN0IGV2ZW50ID0gcG9pbnRlclV0aWxzLmNvb3Jkc1RvRXZlbnQoeyBwYWdlLCBjbGllbnQ6IHBhZ2UgfSlcbiAgY29uc3QgaW50ZXJhY3RhYmxlID0gc2NvcGUuaW50ZXJhY3RhYmxlcy5uZXcoJ3Rlc3QnLCB7fSlcbiAgICAucmVzaXphYmxlKHtcbiAgICAgIGVkZ2VzOiB7IGxlZnQ6IHRydWUsIHRvcDogdHJ1ZSwgcmlnaHQ6IHRydWUsIGJvdHRvbTogdHJ1ZSB9LFxuICAgICAgLy8gdXNlIG1hcmdpbiBncmVhdGVyIHRoYW4gd2lkdGggYW5kIGhlaWdodFxuICAgICAgbWFyZ2luOiBJbmZpbml0eSxcbiAgICB9KVxuICBjb25zdCBpbnRlcmFjdGlvbiA9IHNjb3BlLmludGVyYWN0aW9ucy5uZXcoe30pXG4gIGNvbnN0IHJlY3QgPSB7IGxlZnQ6IDAsIHRvcDogMCwgcmlnaHQ6IDEwLCBib3R0b206IDEwIH1cblxuICBpbnRlcmFjdGlvbi51cGRhdGVQb2ludGVyKGV2ZW50LCBldmVudCwge30sIHRydWUpXG5cbiAgdC5kZWVwRXF1YWwoXG4gICAgc2NvcGUuYWN0aW9ucy5yZXNpemUuY2hlY2tlcihldmVudCwgZXZlbnQsIGludGVyYWN0YWJsZSwge30sIGludGVyYWN0aW9uLCByZWN0KSxcbiAgICB7XG4gICAgICBuYW1lOiAncmVzaXplJyxcbiAgICAgIGVkZ2VzOiB7IGxlZnQ6IHRydWUsIHRvcDogdHJ1ZSwgcmlnaHQ6IGZhbHNlLCBib3R0b206IGZhbHNlIH0sXG4gICAgfSxcbiAgKVxuXG4gIHBhZ2UueCA9IDEwXG4gIGludGVyYWN0aW9uLnVwZGF0ZVBvaW50ZXIoZXZlbnQsIGV2ZW50LCB7fSwgdHJ1ZSlcblxuICB0LmRlZXBFcXVhbChcbiAgICBzY29wZS5hY3Rpb25zLnJlc2l6ZS5jaGVja2VyKGV2ZW50LCBldmVudCwgaW50ZXJhY3RhYmxlLCB7fSwgaW50ZXJhY3Rpb24sIHJlY3QpLFxuICAgIHtcbiAgICAgIG5hbWU6ICdyZXNpemUnLFxuICAgICAgZWRnZXM6IHsgbGVmdDogZmFsc2UsIHRvcDogdHJ1ZSwgcmlnaHQ6IHRydWUsIGJvdHRvbTogZmFsc2UgfSxcbiAgICB9LFxuICApXG5cbiAgcGFnZS55ID0gMTBcbiAgaW50ZXJhY3Rpb24udXBkYXRlUG9pbnRlcihldmVudCwgZXZlbnQsIHt9LCB0cnVlKVxuXG4gIHQuZGVlcEVxdWFsKFxuICAgIHNjb3BlLmFjdGlvbnMucmVzaXplLmNoZWNrZXIoZXZlbnQsIGV2ZW50LCBpbnRlcmFjdGFibGUsIHt9LCBpbnRlcmFjdGlvbiwgcmVjdCksXG4gICAge1xuICAgICAgbmFtZTogJ3Jlc2l6ZScsXG4gICAgICBlZGdlczogeyBsZWZ0OiBmYWxzZSwgdG9wOiBmYWxzZSwgcmlnaHQ6IHRydWUsIGJvdHRvbTogdHJ1ZSB9LFxuICAgIH0sXG4gIClcblxuICB0LmVuZCgpXG59KVxuIl19