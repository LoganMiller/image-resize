import * as utils from '@interactjs/utils';
import PointerEvent from './PointerEvent';
const signals = new utils.Signals();
const simpleSignals = ['down', 'up', 'cancel'];
const simpleEvents = ['down', 'up', 'cancel'];
const pointerEvents = {
    install,
    signals,
    PointerEvent,
    fire,
    collectEventTargets,
    createSignalListener,
    defaults: {
        holdDuration: 600,
        ignoreFrom: null,
        allowFrom: null,
        origin: { x: 0, y: 0 },
    },
    types: [
        'down',
        'move',
        'up',
        'cancel',
        'tap',
        'doubletap',
        'hold',
    ],
};
function fire(arg) {
    const { interaction, pointer, event, eventTarget, type = arg.pointerEvent.type, targets = collectEventTargets(arg), } = arg;
    const { pointerEvent = new PointerEvent(type, pointer, event, eventTarget, interaction), } = arg;
    const signalArg = {
        interaction,
        pointer,
        event,
        eventTarget,
        targets,
        type,
        pointerEvent,
    };
    for (let i = 0; i < targets.length; i++) {
        const target = targets[i];
        for (const prop in target.props || {}) {
            pointerEvent[prop] = target.props[prop];
        }
        const origin = utils.getOriginXY(target.eventable, target.element);
        pointerEvent.subtractOrigin(origin);
        pointerEvent.eventable = target.eventable;
        pointerEvent.currentTarget = target.element;
        target.eventable.fire(pointerEvent);
        pointerEvent.addOrigin(origin);
        if (pointerEvent.immediatePropagationStopped ||
            (pointerEvent.propagationStopped &&
                (i + 1) < targets.length && targets[i + 1].element !== pointerEvent.currentTarget)) {
            break;
        }
    }
    signals.fire('fired', signalArg);
    if (type === 'tap') {
        // if pointerEvent should make a double tap, create and fire a doubletap
        // PointerEvent and use that as the prevTap
        const prevTap = pointerEvent.double
            ? fire({
                interaction,
                pointer,
                event,
                eventTarget,
                type: 'doubletap',
            })
            : pointerEvent;
        interaction.prevTap = prevTap;
        interaction.tapTime = prevTap.timeStamp;
    }
    return pointerEvent;
}
function collectEventTargets({ interaction, pointer, event, eventTarget, type }) {
    const pointerIndex = interaction.getPointerIndex(pointer);
    const pointerInfo = interaction.pointers[pointerIndex];
    // do not fire a tap event if the pointer was moved before being lifted
    if (type === 'tap' && (interaction.pointerWasMoved ||
        // or if the pointerup target is different to the pointerdown target
        !(pointerInfo && pointerInfo.downTarget === eventTarget))) {
        return [];
    }
    const path = utils.dom.getPath(eventTarget);
    const signalArg = {
        interaction,
        pointer,
        event,
        eventTarget,
        type,
        path,
        targets: [],
        element: null,
    };
    for (const element of path) {
        signalArg.element = element;
        signals.fire('collect-targets', signalArg);
    }
    if (type === 'hold') {
        signalArg.targets = signalArg.targets.filter((target) => target.eventable.options.holdDuration === interaction.pointers[pointerIndex].hold.duration);
    }
    return signalArg.targets;
}
function install(scope) {
    const { interactions, } = scope;
    scope.pointerEvents = pointerEvents;
    scope.defaults.actions.pointerEvents = pointerEvents.defaults;
    interactions.signals.on('new', ({ interaction }) => {
        interaction.prevTap = null; // the most recent tap event on this interaction
        interaction.tapTime = 0; // time of the most recent tap event
    });
    interactions.signals.on('update-pointer', ({ down, pointerInfo }) => {
        if (!down && pointerInfo.hold) {
            return;
        }
        pointerInfo.hold = { duration: Infinity, timeout: null };
    });
    interactions.signals.on('move', ({ interaction, pointer, event, eventTarget, duplicateMove }) => {
        const pointerIndex = interaction.getPointerIndex(pointer);
        if (!duplicateMove && (!interaction.pointerIsDown || interaction.pointerWasMoved)) {
            if (interaction.pointerIsDown) {
                clearTimeout(interaction.pointers[pointerIndex].hold.timeout);
            }
            fire({
                interaction,
                pointer,
                event,
                eventTarget,
                type: 'move',
            });
        }
    });
    interactions.signals.on('down', ({ interaction, pointer, event, eventTarget, pointerIndex }) => {
        const timer = interaction.pointers[pointerIndex].hold;
        const path = utils.dom.getPath(eventTarget);
        const signalArg = {
            interaction,
            pointer,
            event,
            eventTarget,
            type: 'hold',
            targets: [],
            path,
            element: null,
        };
        for (const element of path) {
            signalArg.element = element;
            signals.fire('collect-targets', signalArg);
        }
        if (!signalArg.targets.length) {
            return;
        }
        let minDuration = Infinity;
        for (const target of signalArg.targets) {
            const holdDuration = target.eventable.options.holdDuration;
            if (holdDuration < minDuration) {
                minDuration = holdDuration;
            }
        }
        timer.duration = minDuration;
        timer.timeout = setTimeout(() => {
            fire({
                interaction,
                eventTarget,
                pointer,
                event,
                type: 'hold',
            });
        }, minDuration);
    });
    interactions.signals.on('up', ({ interaction, pointer, event, eventTarget }) => {
        if (!interaction.pointerWasMoved) {
            fire({ interaction, eventTarget, pointer, event, type: 'tap' });
        }
    });
    for (const signalName of ['up', 'cancel']) {
        interactions.signals.on(signalName, ({ interaction, pointerIndex }) => {
            if (interaction.pointers[pointerIndex].hold) {
                clearTimeout(interaction.pointers[pointerIndex].hold.timeout);
            }
        });
    }
    for (let i = 0; i < simpleSignals.length; i++) {
        interactions.signals.on(simpleSignals[i], createSignalListener(simpleEvents[i]));
    }
}
function createSignalListener(type) {
    return function ({ interaction, pointer, event, eventTarget }) {
        fire({ interaction, eventTarget, pointer, event, type });
    };
}
export default pointerEvents;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImJhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsT0FBTyxLQUFLLEtBQUssTUFBTSxtQkFBbUIsQ0FBQTtBQUMxQyxPQUFPLFlBQVksTUFBTSxnQkFBZ0IsQ0FBQTtBQW9DekMsTUFBTSxPQUFPLEdBQVMsSUFBSSxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUE7QUFDekMsTUFBTSxhQUFhLEdBQUcsQ0FBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLFFBQVEsQ0FBRSxDQUFBO0FBQ2hELE1BQU0sWUFBWSxHQUFJLENBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxRQUFRLENBQUUsQ0FBQTtBQUVoRCxNQUFNLGFBQWEsR0FBRztJQUNwQixPQUFPO0lBQ1AsT0FBTztJQUNQLFlBQVk7SUFDWixJQUFJO0lBQ0osbUJBQW1CO0lBQ25CLG9CQUFvQjtJQUNwQixRQUFRLEVBQUU7UUFDUixZQUFZLEVBQUUsR0FBRztRQUNqQixVQUFVLEVBQUksSUFBSTtRQUNsQixTQUFTLEVBQUssSUFBSTtRQUNsQixNQUFNLEVBQVEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUU7S0FDN0I7SUFDRCxLQUFLLEVBQUU7UUFDTCxNQUFNO1FBQ04sTUFBTTtRQUNOLElBQUk7UUFDSixRQUFRO1FBQ1IsS0FBSztRQUNMLFdBQVc7UUFDWCxNQUFNO0tBQ1A7Q0FDRixDQUFBO0FBRUQsU0FBUyxJQUFJLENBQW9CLEdBUWhDO0lBQ0MsTUFBTSxFQUNKLFdBQVcsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFDeEMsSUFBSSxHQUFJLEdBQVcsQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUNyQyxPQUFPLEdBQUcsbUJBQW1CLENBQUMsR0FBRyxDQUFDLEdBQ25DLEdBQUcsR0FBRyxDQUFBO0lBRVAsTUFBTSxFQUNKLFlBQVksR0FBRyxJQUFJLFlBQVksQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsV0FBVyxDQUFDLEdBQ2hGLEdBQUcsR0FBRyxDQUFBO0lBRVAsTUFBTSxTQUFTLEdBQUc7UUFDaEIsV0FBVztRQUNYLE9BQU87UUFDUCxLQUFLO1FBQ0wsV0FBVztRQUNYLE9BQU87UUFDUCxJQUFJO1FBQ0osWUFBWTtLQUNiLENBQUE7SUFFRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUN2QyxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFFekIsS0FBSyxNQUFNLElBQUksSUFBSSxNQUFNLENBQUMsS0FBSyxJQUFJLEVBQUUsRUFBRTtZQUNwQyxZQUFvQixDQUFDLElBQUksQ0FBQyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDakQ7UUFFRCxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBRWxFLFlBQVksQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUE7UUFDbkMsWUFBWSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFBO1FBQ3pDLFlBQVksQ0FBQyxhQUFhLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQTtRQUUzQyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQTtRQUVuQyxZQUFZLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBRTlCLElBQUksWUFBWSxDQUFDLDJCQUEyQjtZQUN4QyxDQUFDLFlBQVksQ0FBQyxrQkFBa0I7Z0JBQzVCLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxNQUFNLElBQUksT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLEtBQUssWUFBWSxDQUFDLGFBQWEsQ0FBQyxFQUFFO1lBQzFGLE1BQUs7U0FDTjtLQUNGO0lBRUQsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUE7SUFFaEMsSUFBSSxJQUFJLEtBQUssS0FBSyxFQUFFO1FBQ2xCLHdFQUF3RTtRQUN4RSwyQ0FBMkM7UUFDM0MsTUFBTSxPQUFPLEdBQUcsWUFBWSxDQUFDLE1BQU07WUFDakMsQ0FBQyxDQUFDLElBQUksQ0FBQztnQkFDTCxXQUFXO2dCQUNYLE9BQU87Z0JBQ1AsS0FBSztnQkFDTCxXQUFXO2dCQUNYLElBQUksRUFBRSxXQUFXO2FBQ2xCLENBQUM7WUFDRixDQUFDLENBQUMsWUFBWSxDQUFBO1FBRWhCLFdBQVcsQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFBO1FBQzdCLFdBQVcsQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQTtLQUN4QztJQUVELE9BQU8sWUFBWSxDQUFBO0FBQ3JCLENBQUM7QUFFRCxTQUFTLG1CQUFtQixDQUFvQixFQUFFLFdBQVcsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBTS9GO0lBQ0MsTUFBTSxZQUFZLEdBQUcsV0FBVyxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUN6RCxNQUFNLFdBQVcsR0FBRyxXQUFXLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFBO0lBRXRELHVFQUF1RTtJQUN2RSxJQUFJLElBQUksS0FBSyxLQUFLLElBQUksQ0FBQyxXQUFXLENBQUMsZUFBZTtRQUM5QyxvRUFBb0U7UUFDcEUsQ0FBQyxDQUFDLFdBQVcsSUFBSSxXQUFXLENBQUMsVUFBVSxLQUFLLFdBQVcsQ0FBQyxDQUFDLEVBQUU7UUFDN0QsT0FBTyxFQUFFLENBQUE7S0FDVjtJQUVELE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFBO0lBQzNDLE1BQU0sU0FBUyxHQUFHO1FBQ2hCLFdBQVc7UUFDWCxPQUFPO1FBQ1AsS0FBSztRQUNMLFdBQVc7UUFDWCxJQUFJO1FBQ0osSUFBSTtRQUNKLE9BQU8sRUFBRSxFQUFxQjtRQUM5QixPQUFPLEVBQUUsSUFBSTtLQUNkLENBQUE7SUFFRCxLQUFLLE1BQU0sT0FBTyxJQUFJLElBQUksRUFBRTtRQUMxQixTQUFTLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQTtRQUUzQixPQUFPLENBQUMsSUFBSSxDQUFDLGlCQUFpQixFQUFFLFNBQVMsQ0FBQyxDQUFBO0tBQzNDO0lBRUQsSUFBSSxJQUFJLEtBQUssTUFBTSxFQUFFO1FBQ25CLFNBQVMsQ0FBQyxPQUFPLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUN0RCxNQUFNLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxZQUFZLEtBQUssV0FBVyxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUE7S0FDOUY7SUFFRCxPQUFPLFNBQVMsQ0FBQyxPQUFPLENBQUE7QUFDMUIsQ0FBQztBQUVELFNBQVMsT0FBTyxDQUFFLEtBQVk7SUFDNUIsTUFBTSxFQUNKLFlBQVksR0FDYixHQUFHLEtBQUssQ0FBQTtJQUVULEtBQUssQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFBO0lBQ25DLEtBQUssQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUMsUUFBUSxDQUFBO0lBRTdELFlBQVksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsV0FBVyxFQUFFLEVBQUUsRUFBRTtRQUNqRCxXQUFXLENBQUMsT0FBTyxHQUFNLElBQUksQ0FBQSxDQUFFLGdEQUFnRDtRQUMvRSxXQUFXLENBQUMsT0FBTyxHQUFNLENBQUMsQ0FBQSxDQUFLLG9DQUFvQztJQUNyRSxDQUFDLENBQUMsQ0FBQTtJQUVGLFlBQVksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLGdCQUFnQixFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFLEVBQUUsRUFBRTtRQUNsRSxJQUFJLENBQUMsSUFBSSxJQUFJLFdBQVcsQ0FBQyxJQUFJLEVBQUU7WUFDN0IsT0FBTTtTQUNQO1FBRUQsV0FBVyxDQUFDLElBQUksR0FBRyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFBO0lBQzFELENBQUMsQ0FBQyxDQUFBO0lBRUYsWUFBWSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxXQUFXLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsYUFBYSxFQUFFLEVBQUUsRUFBRTtRQUM5RixNQUFNLFlBQVksR0FBRyxXQUFXLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBRXpELElBQUksQ0FBQyxhQUFhLElBQUksQ0FBQyxDQUFDLFdBQVcsQ0FBQyxhQUFhLElBQUksV0FBVyxDQUFDLGVBQWUsQ0FBQyxFQUFFO1lBQ2pGLElBQUksV0FBVyxDQUFDLGFBQWEsRUFBRTtnQkFDN0IsWUFBWSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO2FBQzlEO1lBRUQsSUFBSSxDQUFDO2dCQUNILFdBQVc7Z0JBQ1gsT0FBTztnQkFDUCxLQUFLO2dCQUNMLFdBQVc7Z0JBQ1gsSUFBSSxFQUFFLE1BQU07YUFDYixDQUFDLENBQUE7U0FDSDtJQUNILENBQUMsQ0FBQyxDQUFBO0lBRUYsWUFBWSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxXQUFXLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsWUFBWSxFQUFFLEVBQUUsRUFBRTtRQUM3RixNQUFNLEtBQUssR0FBRyxXQUFXLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksQ0FBQTtRQUNyRCxNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQTtRQUMzQyxNQUFNLFNBQVMsR0FBRztZQUNoQixXQUFXO1lBQ1gsT0FBTztZQUNQLEtBQUs7WUFDTCxXQUFXO1lBQ1gsSUFBSSxFQUFFLE1BQU07WUFDWixPQUFPLEVBQUUsRUFBcUI7WUFDOUIsSUFBSTtZQUNKLE9BQU8sRUFBRSxJQUFJO1NBQ2QsQ0FBQTtRQUVELEtBQUssTUFBTSxPQUFPLElBQUksSUFBSSxFQUFFO1lBQzFCLFNBQVMsQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFBO1lBRTNCLE9BQU8sQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsU0FBUyxDQUFDLENBQUE7U0FDM0M7UUFFRCxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUU7WUFBRSxPQUFNO1NBQUU7UUFFekMsSUFBSSxXQUFXLEdBQUcsUUFBUSxDQUFBO1FBRTFCLEtBQUssTUFBTSxNQUFNLElBQUksU0FBUyxDQUFDLE9BQU8sRUFBRTtZQUN0QyxNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUE7WUFFMUQsSUFBSSxZQUFZLEdBQUcsV0FBVyxFQUFFO2dCQUM5QixXQUFXLEdBQUcsWUFBWSxDQUFBO2FBQzNCO1NBQ0Y7UUFFRCxLQUFLLENBQUMsUUFBUSxHQUFHLFdBQVcsQ0FBQTtRQUM1QixLQUFLLENBQUMsT0FBTyxHQUFHLFVBQVUsQ0FBQyxHQUFHLEVBQUU7WUFDOUIsSUFBSSxDQUFDO2dCQUNILFdBQVc7Z0JBQ1gsV0FBVztnQkFDWCxPQUFPO2dCQUNQLEtBQUs7Z0JBQ0wsSUFBSSxFQUFFLE1BQU07YUFDYixDQUFDLENBQUE7UUFDSixDQUFDLEVBQUUsV0FBVyxDQUFDLENBQUE7SUFDakIsQ0FBQyxDQUFDLENBQUE7SUFFRixZQUFZLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLFdBQVcsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxFQUFFLEVBQUU7UUFDN0UsSUFBSSxDQUFDLFdBQVcsQ0FBQyxlQUFlLEVBQUU7WUFDaEMsSUFBSSxDQUFDLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFBO1NBQ2hFO0lBQ0gsQ0FBQyxDQUFDLENBQUE7SUFFRixLQUFLLE1BQU0sVUFBVSxJQUFJLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxFQUFFO1FBQ3pDLFlBQVksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxFQUFFLEVBQUU7WUFDcEUsSUFBSSxXQUFXLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksRUFBRTtnQkFDM0MsWUFBWSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO2FBQzlEO1FBQ0gsQ0FBQyxDQUFDLENBQUE7S0FDSDtJQUVELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxhQUFhLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzdDLFlBQVksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsRUFBRSxvQkFBb0IsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQ2pGO0FBQ0gsQ0FBQztBQUVELFNBQVMsb0JBQW9CLENBQUUsSUFBWTtJQUN6QyxPQUFPLFVBQVUsRUFBRSxXQUFXLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQU87UUFDaEUsSUFBSSxDQUFDLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUE7SUFDMUQsQ0FBQyxDQUFBO0FBQ0gsQ0FBQztBQUVELGVBQWUsYUFBYSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEV2ZW50YWJsZSBmcm9tICdAaW50ZXJhY3Rqcy9jb3JlL0V2ZW50YWJsZSdcbmltcG9ydCBJbnRlcmFjdGlvbiBmcm9tICdAaW50ZXJhY3Rqcy9jb3JlL0ludGVyYWN0aW9uJ1xuaW1wb3J0IHsgU2NvcGUgfSBmcm9tICdAaW50ZXJhY3Rqcy9jb3JlL3Njb3BlJ1xuaW1wb3J0ICogYXMgdXRpbHMgZnJvbSAnQGludGVyYWN0anMvdXRpbHMnXG5pbXBvcnQgUG9pbnRlckV2ZW50IGZyb20gJy4vUG9pbnRlckV2ZW50J1xuXG50eXBlIEV2ZW50VGFyZ2V0TGlzdCA9IEFycmF5PHtcbiAgZXZlbnRhYmxlOiBFdmVudGFibGUsXG4gIGVsZW1lbnQ6IEludGVyYWN0LkV2ZW50VGFyZ2V0LFxuICBwcm9wczogeyBba2V5OiBzdHJpbmddOiBhbnkgfSxcbn0+XG5cbmRlY2xhcmUgbW9kdWxlICdAaW50ZXJhY3Rqcy9jb3JlL3Njb3BlJyB7XG4gIGludGVyZmFjZSBTY29wZSB7XG4gICAgcG9pbnRlckV2ZW50czogdHlwZW9mIHBvaW50ZXJFdmVudHNcbiAgfVxufVxuXG5kZWNsYXJlIG1vZHVsZSAnQGludGVyYWN0anMvY29yZS9JbnRlcmFjdGlvbicge1xuICBpbnRlcmZhY2UgSW50ZXJhY3Rpb24ge1xuICAgIHByZXZUYXA/OiBQb2ludGVyRXZlbnQ8c3RyaW5nPlxuICAgIHRhcFRpbWU/OiBudW1iZXJcbiAgfVxufVxuXG5kZWNsYXJlIG1vZHVsZSAnQGludGVyYWN0anMvY29yZS9Qb2ludGVySW5mbycge1xuICBpbnRlcmZhY2UgUG9pbnRlckluZm8ge1xuICAgIGhvbGQ/OiB7XG4gICAgICBkdXJhdGlvbjogbnVtYmVyXG4gICAgICB0aW1lb3V0OiBhbnlcbiAgICB9XG4gIH1cbn1cblxuZGVjbGFyZSBtb2R1bGUgJ0BpbnRlcmFjdGpzL2NvcmUvZGVmYXVsdE9wdGlvbnMnIHtcbiAgaW50ZXJmYWNlIEFjdGlvbkRlZmF1bHRzIHtcbiAgICBwb2ludGVyRXZlbnRzOiBJbnRlcmFjdC5PcHRpb25zXG4gIH1cbn1cblxuY29uc3Qgc2lnbmFscyAgICAgICA9IG5ldyB1dGlscy5TaWduYWxzKClcbmNvbnN0IHNpbXBsZVNpZ25hbHMgPSBbICdkb3duJywgJ3VwJywgJ2NhbmNlbCcgXVxuY29uc3Qgc2ltcGxlRXZlbnRzICA9IFsgJ2Rvd24nLCAndXAnLCAnY2FuY2VsJyBdXG5cbmNvbnN0IHBvaW50ZXJFdmVudHMgPSB7XG4gIGluc3RhbGwsXG4gIHNpZ25hbHMsXG4gIFBvaW50ZXJFdmVudCxcbiAgZmlyZSxcbiAgY29sbGVjdEV2ZW50VGFyZ2V0cyxcbiAgY3JlYXRlU2lnbmFsTGlzdGVuZXIsXG4gIGRlZmF1bHRzOiB7XG4gICAgaG9sZER1cmF0aW9uOiA2MDAsXG4gICAgaWdub3JlRnJvbSAgOiBudWxsLFxuICAgIGFsbG93RnJvbSAgIDogbnVsbCxcbiAgICBvcmlnaW4gICAgICA6IHsgeDogMCwgeTogMCB9LFxuICB9LFxuICB0eXBlczogW1xuICAgICdkb3duJyxcbiAgICAnbW92ZScsXG4gICAgJ3VwJyxcbiAgICAnY2FuY2VsJyxcbiAgICAndGFwJyxcbiAgICAnZG91YmxldGFwJyxcbiAgICAnaG9sZCcsXG4gIF0sXG59XG5cbmZ1bmN0aW9uIGZpcmU8VCBleHRlbmRzIHN0cmluZz4gKGFyZzoge1xuICBpbnRlcmFjdGlvbjogSW50ZXJhY3Rpb24sXG4gIHBvaW50ZXI6IEludGVyYWN0LlBvaW50ZXJUeXBlLFxuICBldmVudDogSW50ZXJhY3QuUG9pbnRlckV2ZW50VHlwZSxcbiAgZXZlbnRUYXJnZXQ6IEV2ZW50VGFyZ2V0LFxuICB0YXJnZXRzPzogRXZlbnRUYXJnZXRMaXN0LFxuICBwb2ludGVyRXZlbnQ/OiBQb2ludGVyRXZlbnQ8VD4sXG4gIHR5cGU6IFRcbn0pIHtcbiAgY29uc3Qge1xuICAgIGludGVyYWN0aW9uLCBwb2ludGVyLCBldmVudCwgZXZlbnRUYXJnZXQsXG4gICAgdHlwZSA9IChhcmcgYXMgYW55KS5wb2ludGVyRXZlbnQudHlwZSxcbiAgICB0YXJnZXRzID0gY29sbGVjdEV2ZW50VGFyZ2V0cyhhcmcpLFxuICB9ID0gYXJnXG5cbiAgY29uc3Qge1xuICAgIHBvaW50ZXJFdmVudCA9IG5ldyBQb2ludGVyRXZlbnQodHlwZSwgcG9pbnRlciwgZXZlbnQsIGV2ZW50VGFyZ2V0LCBpbnRlcmFjdGlvbiksXG4gIH0gPSBhcmdcblxuICBjb25zdCBzaWduYWxBcmcgPSB7XG4gICAgaW50ZXJhY3Rpb24sXG4gICAgcG9pbnRlcixcbiAgICBldmVudCxcbiAgICBldmVudFRhcmdldCxcbiAgICB0YXJnZXRzLFxuICAgIHR5cGUsXG4gICAgcG9pbnRlckV2ZW50LFxuICB9XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0YXJnZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgdGFyZ2V0ID0gdGFyZ2V0c1tpXVxuXG4gICAgZm9yIChjb25zdCBwcm9wIGluIHRhcmdldC5wcm9wcyB8fCB7fSkge1xuICAgICAgKHBvaW50ZXJFdmVudCBhcyBhbnkpW3Byb3BdID0gdGFyZ2V0LnByb3BzW3Byb3BdXG4gICAgfVxuXG4gICAgY29uc3Qgb3JpZ2luID0gdXRpbHMuZ2V0T3JpZ2luWFkodGFyZ2V0LmV2ZW50YWJsZSwgdGFyZ2V0LmVsZW1lbnQpXG5cbiAgICBwb2ludGVyRXZlbnQuc3VidHJhY3RPcmlnaW4ob3JpZ2luKVxuICAgIHBvaW50ZXJFdmVudC5ldmVudGFibGUgPSB0YXJnZXQuZXZlbnRhYmxlXG4gICAgcG9pbnRlckV2ZW50LmN1cnJlbnRUYXJnZXQgPSB0YXJnZXQuZWxlbWVudFxuXG4gICAgdGFyZ2V0LmV2ZW50YWJsZS5maXJlKHBvaW50ZXJFdmVudClcblxuICAgIHBvaW50ZXJFdmVudC5hZGRPcmlnaW4ob3JpZ2luKVxuXG4gICAgaWYgKHBvaW50ZXJFdmVudC5pbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgfHxcbiAgICAgICAgKHBvaW50ZXJFdmVudC5wcm9wYWdhdGlvblN0b3BwZWQgJiZcbiAgICAgICAgICAgIChpICsgMSkgPCB0YXJnZXRzLmxlbmd0aCAmJiB0YXJnZXRzW2kgKyAxXS5lbGVtZW50ICE9PSBwb2ludGVyRXZlbnQuY3VycmVudFRhcmdldCkpIHtcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgc2lnbmFscy5maXJlKCdmaXJlZCcsIHNpZ25hbEFyZylcblxuICBpZiAodHlwZSA9PT0gJ3RhcCcpIHtcbiAgICAvLyBpZiBwb2ludGVyRXZlbnQgc2hvdWxkIG1ha2UgYSBkb3VibGUgdGFwLCBjcmVhdGUgYW5kIGZpcmUgYSBkb3VibGV0YXBcbiAgICAvLyBQb2ludGVyRXZlbnQgYW5kIHVzZSB0aGF0IGFzIHRoZSBwcmV2VGFwXG4gICAgY29uc3QgcHJldlRhcCA9IHBvaW50ZXJFdmVudC5kb3VibGVcbiAgICAgID8gZmlyZSh7XG4gICAgICAgIGludGVyYWN0aW9uLFxuICAgICAgICBwb2ludGVyLFxuICAgICAgICBldmVudCxcbiAgICAgICAgZXZlbnRUYXJnZXQsXG4gICAgICAgIHR5cGU6ICdkb3VibGV0YXAnLFxuICAgICAgfSlcbiAgICAgIDogcG9pbnRlckV2ZW50XG5cbiAgICBpbnRlcmFjdGlvbi5wcmV2VGFwID0gcHJldlRhcFxuICAgIGludGVyYWN0aW9uLnRhcFRpbWUgPSBwcmV2VGFwLnRpbWVTdGFtcFxuICB9XG5cbiAgcmV0dXJuIHBvaW50ZXJFdmVudFxufVxuXG5mdW5jdGlvbiBjb2xsZWN0RXZlbnRUYXJnZXRzPFQgZXh0ZW5kcyBzdHJpbmc+ICh7IGludGVyYWN0aW9uLCBwb2ludGVyLCBldmVudCwgZXZlbnRUYXJnZXQsIHR5cGUgfToge1xuICBpbnRlcmFjdGlvbjogSW50ZXJhY3Rpb24sXG4gIHBvaW50ZXI6IEludGVyYWN0LlBvaW50ZXJUeXBlLFxuICBldmVudDogSW50ZXJhY3QuUG9pbnRlckV2ZW50VHlwZSxcbiAgZXZlbnRUYXJnZXQ6IEV2ZW50VGFyZ2V0LFxuICB0eXBlOiBUXG59KSB7XG4gIGNvbnN0IHBvaW50ZXJJbmRleCA9IGludGVyYWN0aW9uLmdldFBvaW50ZXJJbmRleChwb2ludGVyKVxuICBjb25zdCBwb2ludGVySW5mbyA9IGludGVyYWN0aW9uLnBvaW50ZXJzW3BvaW50ZXJJbmRleF1cblxuICAvLyBkbyBub3QgZmlyZSBhIHRhcCBldmVudCBpZiB0aGUgcG9pbnRlciB3YXMgbW92ZWQgYmVmb3JlIGJlaW5nIGxpZnRlZFxuICBpZiAodHlwZSA9PT0gJ3RhcCcgJiYgKGludGVyYWN0aW9uLnBvaW50ZXJXYXNNb3ZlZCB8fFxuICAgICAgLy8gb3IgaWYgdGhlIHBvaW50ZXJ1cCB0YXJnZXQgaXMgZGlmZmVyZW50IHRvIHRoZSBwb2ludGVyZG93biB0YXJnZXRcbiAgICAgICEocG9pbnRlckluZm8gJiYgcG9pbnRlckluZm8uZG93blRhcmdldCA9PT0gZXZlbnRUYXJnZXQpKSkge1xuICAgIHJldHVybiBbXVxuICB9XG5cbiAgY29uc3QgcGF0aCA9IHV0aWxzLmRvbS5nZXRQYXRoKGV2ZW50VGFyZ2V0KVxuICBjb25zdCBzaWduYWxBcmcgPSB7XG4gICAgaW50ZXJhY3Rpb24sXG4gICAgcG9pbnRlcixcbiAgICBldmVudCxcbiAgICBldmVudFRhcmdldCxcbiAgICB0eXBlLFxuICAgIHBhdGgsXG4gICAgdGFyZ2V0czogW10gYXMgRXZlbnRUYXJnZXRMaXN0LFxuICAgIGVsZW1lbnQ6IG51bGwsXG4gIH1cblxuICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgcGF0aCkge1xuICAgIHNpZ25hbEFyZy5lbGVtZW50ID0gZWxlbWVudFxuXG4gICAgc2lnbmFscy5maXJlKCdjb2xsZWN0LXRhcmdldHMnLCBzaWduYWxBcmcpXG4gIH1cblxuICBpZiAodHlwZSA9PT0gJ2hvbGQnKSB7XG4gICAgc2lnbmFsQXJnLnRhcmdldHMgPSBzaWduYWxBcmcudGFyZ2V0cy5maWx0ZXIoKHRhcmdldCkgPT5cbiAgICAgIHRhcmdldC5ldmVudGFibGUub3B0aW9ucy5ob2xkRHVyYXRpb24gPT09IGludGVyYWN0aW9uLnBvaW50ZXJzW3BvaW50ZXJJbmRleF0uaG9sZC5kdXJhdGlvbilcbiAgfVxuXG4gIHJldHVybiBzaWduYWxBcmcudGFyZ2V0c1xufVxuXG5mdW5jdGlvbiBpbnN0YWxsIChzY29wZTogU2NvcGUpIHtcbiAgY29uc3Qge1xuICAgIGludGVyYWN0aW9ucyxcbiAgfSA9IHNjb3BlXG5cbiAgc2NvcGUucG9pbnRlckV2ZW50cyA9IHBvaW50ZXJFdmVudHNcbiAgc2NvcGUuZGVmYXVsdHMuYWN0aW9ucy5wb2ludGVyRXZlbnRzID0gcG9pbnRlckV2ZW50cy5kZWZhdWx0c1xuXG4gIGludGVyYWN0aW9ucy5zaWduYWxzLm9uKCduZXcnLCAoeyBpbnRlcmFjdGlvbiB9KSA9PiB7XG4gICAgaW50ZXJhY3Rpb24ucHJldlRhcCAgICA9IG51bGwgIC8vIHRoZSBtb3N0IHJlY2VudCB0YXAgZXZlbnQgb24gdGhpcyBpbnRlcmFjdGlvblxuICAgIGludGVyYWN0aW9uLnRhcFRpbWUgICAgPSAwICAgICAvLyB0aW1lIG9mIHRoZSBtb3N0IHJlY2VudCB0YXAgZXZlbnRcbiAgfSlcblxuICBpbnRlcmFjdGlvbnMuc2lnbmFscy5vbigndXBkYXRlLXBvaW50ZXInLCAoeyBkb3duLCBwb2ludGVySW5mbyB9KSA9PiB7XG4gICAgaWYgKCFkb3duICYmIHBvaW50ZXJJbmZvLmhvbGQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHBvaW50ZXJJbmZvLmhvbGQgPSB7IGR1cmF0aW9uOiBJbmZpbml0eSwgdGltZW91dDogbnVsbCB9XG4gIH0pXG5cbiAgaW50ZXJhY3Rpb25zLnNpZ25hbHMub24oJ21vdmUnLCAoeyBpbnRlcmFjdGlvbiwgcG9pbnRlciwgZXZlbnQsIGV2ZW50VGFyZ2V0LCBkdXBsaWNhdGVNb3ZlIH0pID0+IHtcbiAgICBjb25zdCBwb2ludGVySW5kZXggPSBpbnRlcmFjdGlvbi5nZXRQb2ludGVySW5kZXgocG9pbnRlcilcblxuICAgIGlmICghZHVwbGljYXRlTW92ZSAmJiAoIWludGVyYWN0aW9uLnBvaW50ZXJJc0Rvd24gfHwgaW50ZXJhY3Rpb24ucG9pbnRlcldhc01vdmVkKSkge1xuICAgICAgaWYgKGludGVyYWN0aW9uLnBvaW50ZXJJc0Rvd24pIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KGludGVyYWN0aW9uLnBvaW50ZXJzW3BvaW50ZXJJbmRleF0uaG9sZC50aW1lb3V0KVxuICAgICAgfVxuXG4gICAgICBmaXJlKHtcbiAgICAgICAgaW50ZXJhY3Rpb24sXG4gICAgICAgIHBvaW50ZXIsXG4gICAgICAgIGV2ZW50LFxuICAgICAgICBldmVudFRhcmdldCxcbiAgICAgICAgdHlwZTogJ21vdmUnLFxuICAgICAgfSlcbiAgICB9XG4gIH0pXG5cbiAgaW50ZXJhY3Rpb25zLnNpZ25hbHMub24oJ2Rvd24nLCAoeyBpbnRlcmFjdGlvbiwgcG9pbnRlciwgZXZlbnQsIGV2ZW50VGFyZ2V0LCBwb2ludGVySW5kZXggfSkgPT4ge1xuICAgIGNvbnN0IHRpbWVyID0gaW50ZXJhY3Rpb24ucG9pbnRlcnNbcG9pbnRlckluZGV4XS5ob2xkXG4gICAgY29uc3QgcGF0aCA9IHV0aWxzLmRvbS5nZXRQYXRoKGV2ZW50VGFyZ2V0KVxuICAgIGNvbnN0IHNpZ25hbEFyZyA9IHtcbiAgICAgIGludGVyYWN0aW9uLFxuICAgICAgcG9pbnRlcixcbiAgICAgIGV2ZW50LFxuICAgICAgZXZlbnRUYXJnZXQsXG4gICAgICB0eXBlOiAnaG9sZCcsXG4gICAgICB0YXJnZXRzOiBbXSBhcyBFdmVudFRhcmdldExpc3QsXG4gICAgICBwYXRoLFxuICAgICAgZWxlbWVudDogbnVsbCxcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgcGF0aCkge1xuICAgICAgc2lnbmFsQXJnLmVsZW1lbnQgPSBlbGVtZW50XG5cbiAgICAgIHNpZ25hbHMuZmlyZSgnY29sbGVjdC10YXJnZXRzJywgc2lnbmFsQXJnKVxuICAgIH1cblxuICAgIGlmICghc2lnbmFsQXJnLnRhcmdldHMubGVuZ3RoKSB7IHJldHVybiB9XG5cbiAgICBsZXQgbWluRHVyYXRpb24gPSBJbmZpbml0eVxuXG4gICAgZm9yIChjb25zdCB0YXJnZXQgb2Ygc2lnbmFsQXJnLnRhcmdldHMpIHtcbiAgICAgIGNvbnN0IGhvbGREdXJhdGlvbiA9IHRhcmdldC5ldmVudGFibGUub3B0aW9ucy5ob2xkRHVyYXRpb25cblxuICAgICAgaWYgKGhvbGREdXJhdGlvbiA8IG1pbkR1cmF0aW9uKSB7XG4gICAgICAgIG1pbkR1cmF0aW9uID0gaG9sZER1cmF0aW9uXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGltZXIuZHVyYXRpb24gPSBtaW5EdXJhdGlvblxuICAgIHRpbWVyLnRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGZpcmUoe1xuICAgICAgICBpbnRlcmFjdGlvbixcbiAgICAgICAgZXZlbnRUYXJnZXQsXG4gICAgICAgIHBvaW50ZXIsXG4gICAgICAgIGV2ZW50LFxuICAgICAgICB0eXBlOiAnaG9sZCcsXG4gICAgICB9KVxuICAgIH0sIG1pbkR1cmF0aW9uKVxuICB9KVxuXG4gIGludGVyYWN0aW9ucy5zaWduYWxzLm9uKCd1cCcsICh7IGludGVyYWN0aW9uLCBwb2ludGVyLCBldmVudCwgZXZlbnRUYXJnZXQgfSkgPT4ge1xuICAgIGlmICghaW50ZXJhY3Rpb24ucG9pbnRlcldhc01vdmVkKSB7XG4gICAgICBmaXJlKHsgaW50ZXJhY3Rpb24sIGV2ZW50VGFyZ2V0LCBwb2ludGVyLCBldmVudCwgdHlwZTogJ3RhcCcgfSlcbiAgICB9XG4gIH0pXG5cbiAgZm9yIChjb25zdCBzaWduYWxOYW1lIG9mIFsndXAnLCAnY2FuY2VsJ10pIHtcbiAgICBpbnRlcmFjdGlvbnMuc2lnbmFscy5vbihzaWduYWxOYW1lLCAoeyBpbnRlcmFjdGlvbiwgcG9pbnRlckluZGV4IH0pID0+IHtcbiAgICAgIGlmIChpbnRlcmFjdGlvbi5wb2ludGVyc1twb2ludGVySW5kZXhdLmhvbGQpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KGludGVyYWN0aW9uLnBvaW50ZXJzW3BvaW50ZXJJbmRleF0uaG9sZC50aW1lb3V0KVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHNpbXBsZVNpZ25hbHMubGVuZ3RoOyBpKyspIHtcbiAgICBpbnRlcmFjdGlvbnMuc2lnbmFscy5vbihzaW1wbGVTaWduYWxzW2ldLCBjcmVhdGVTaWduYWxMaXN0ZW5lcihzaW1wbGVFdmVudHNbaV0pKVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVNpZ25hbExpc3RlbmVyICh0eXBlOiBzdHJpbmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh7IGludGVyYWN0aW9uLCBwb2ludGVyLCBldmVudCwgZXZlbnRUYXJnZXQgfTogYW55KSB7XG4gICAgZmlyZSh7IGludGVyYWN0aW9uLCBldmVudFRhcmdldCwgcG9pbnRlciwgZXZlbnQsIHR5cGUgfSlcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBwb2ludGVyRXZlbnRzXG4iXX0=